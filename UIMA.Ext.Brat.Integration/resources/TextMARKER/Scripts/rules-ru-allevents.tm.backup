PACKAGE com.hp.hplabs.lim2.ie.text.typesystem;
TYPESYSTEM hp-text-ru-TypeSystem;

// ------------------------------------------------------------------------------------------------
// --------------------------------------- AUXILIARY ----------------------------------------------
// ------------------------------------------------------------------------------------------------
// capitalized one character abbreviation
W{REGEXP("\\p{javaUpperCase}")} "." {->MARK(CAP1_ABBR,1,2)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- NUMBERS ------------------------------------------------
// ------------------------------------------------------------------------------------------------
NUM+ COMMA NUM+ HL_WordNumber+? {->MARK(NUM,1,2,3,4)};
NUM+ HL_WordNumber+? {->MARK(NUM,1,2)};
HL_WordNumber+ {->MARK(NUM,1)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- TEMPORAL EXPRESSIONS -----------------------------------
// ------------------------------------------------------------------------------------------------
NUM{REGEXP("(1[6-9]|2[0-2])[0-9]{2}") -> MARK(TE_PossibleYear)};

NUM TE_Month{->MARK(TE,1,2)};

NUM "-" W{REGEXP("о?е")} TE_Month{->MARK(TE,1,2,3,4)};

NUM TE_Month COMMA? TE_PossibleYear {->MARK(TE,1,2,3,4)};

NUM TE_Month COMMA? TE_PossibleYear "года" {-> MARK(TE,1,2,3,4,5)};

TE_PossibleYear COMMA? NUM TE_Month {->MARK(TE,1,2,3,4)};

NUM "." NUM "." TE_PossibleYear {->MARK(TE,1,2,3,4,5)};

W{REGEXP("во?", true)} W?? TE_Day ","? TE? {->MARK(TE,1,2,3,4,5)};

"на" W?? "выходных" {-> MARK(TE,1,2,3)};

"в" NUM{REGEXP("[0-2]?[0-9]")} ANY{REGEXP("[-:.]")} NUM{REGEXP("[0-5][0-9]")->MARK(TE_Time,1,2,3,4)};

TE_Time "по" ANY[1,3] "времени"{->MARK(TE_Time,1,2,3,4)};

TE TE_Time{->MARK(TE,1,2)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- COUNTRY ADJECTIVES -------------------------------------
// ------------------------------------------------------------------------------------------------
HL_CountryAdj "-" HL_CountryAdj "-"? HL_CountryAdj? "-"? HL_CountryAdj? {->MARK(HL_CountryAdj,1,2,3,4,5,6,7)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- PRICES -------------------------------------------------
// ------------------------------------------------------------------------------------------------
NUM HL_CurrencyCode {-> MARK(HL_PriceUnit,1,2)};

NUM HL_CurrencyUnit {-> MARK(HL_PriceUnit,1,2)};

NUM HL_CountryAdj HL_CurrencyUnit {-> MARK(HL_PriceUnit,1,2,3)};

HL_CurrencyUnit NUM {-> MARK(HL_PriceUnit,1,2)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- PEOPLE -------------------------------------------------
// ------------------------------------------------------------------------------------------------
// CAP1_ABBR CAP1_ABBR? CW{NOT(PARTOF(NamedEntity)) -> MARK(HL_Person,1,2,3)};
CAP1_ABBR CAP1_ABBR? CW{-> MARK(HL_Person,1,2,3)};

// consumed by previous
// "C" "." "D" "." HL_SecondName {->MARK(HL_Person,1,2,3,4,5)}; 

//CW{NOT(PARTOF(NamedEntity))} CAP1_ABBR CAP1_ABBR? {->MARK(HL_Person,1,2,3)};
CW CAP1_ABBR CAP1_ABBR? {->MARK(HL_Person,1,2,3)};

// consumed by previous
// HL_SecondName "C" "." "D" "." {->MARK(HL_Person,1,2,3,4,5)};

// HL_FirstName CW??{NOT(PARTOF(NamedEntity))} CW{NOT(PARTOF(NamedEntity)) -> MARK(HL_SecondName, 2,3)};
HL_FirstName CW?? CW{-> MARK(HL_SecondName, 2,3)};

// CW{NOT(PARTOF(NamedEntity)) -> MARK(HL_SecondName)} HL_FirstName;
// CW{-> MARK(HL_SecondName)} HL_FirstName;

HL_FirstName? W{REGEXP ("Мак|де|ди|дю|дез|ле|да|ван|фон|цу|", true)} CW {->MARK(HL_Person,1,2,3)}; 

HL_FirstName? "О" "’" CW{NOT(PARTOF(NamedEntity)) ->MARK(HL_SecondName,2,3,4)};

HL_FirstName? "д" "’" CW{NOT(PARTOF(NamedEntity)) ->MARK(HL_SecondName,2,3,4)};

HL_FirstName? "Тер" "-" CW{NOT(PARTOF(NamedEntity)) ->MARK(HL_SecondName,2,3,4)};

HL_SecondName HL_SecondName {->MARK(HL_SecondName,1,2)};

HL_FirstName HL_FirstName {->MARK(HL_FirstName,1,2)};

HL_FirstName? HL_SecondName {->MARK(HL_Person,1,2)};

HL_SecondName HL_FirstName {->MARK(HL_Person,1,2)};

// HL_FirstName? CAP1_ABBR HL_SecondName {->MARK(HL_Person,1,2,3)};
HL_FirstName? CAP1_ABBR CW {->MARK(HL_Person,1,2,3)};

HL_FirstName "\"" W "\"" CW{NOT(PARTOF(NamedEntity)) -> MARK(HL_Person,1,2,3,4,5)};

// should be after all rules marking FirstName 
HL_FirstName {-> MARK(HL_Person)};

// universal person name expansion
// CW+?{NOT(PARTOF(NamedEntity))} HL_Person CW+?{NOT(PARTOF(NamedEntity))->MARK(HL_Person,1,2,3)}

// ------------------------------------------------------------------------------------------------
// --------------------------------------- PERSON MENTIONS WITH INDICATORS ------------------------
// ------------------------------------------------------------------------------------------------
HL_BusinessPersonIndicator HL_Person {->MARK(HL_Person,1,2)};

HL_BusinessPersonIndicator{NOT(PARTOF(HL_Person))} CW+ {->MARK(HL_Person,1,2)};

HL_PoliticalPersonIndicator{NOT(PARTOF(HL_Person))} ANY[0,5]? HL_Person {->MARK (HL_Person,1,2,3)}; 

// HL_PoliticalPersonIndicator Token[0,4]? CW+ {-> MARK(HL_Person,1,2,3)};

HL_GeneralPersonIndicator HL_Person {->MARK(HL_Person,1,2)};

HL_GeneralPersonIndicator{NOT(PARTOF(HL_Person))} CW+ {->MARK(HL_Person,1,2)};

// moved from above
HL_Person "(" CW+ ")" {->MARK(HL_Person,1,2,3,4)};

HL_Person "и" HL_Person {->MARK(HL_Person,1,2,3)};

HL_Person COMMA HL_Person {->MARK(HL_Person,1,2,3)};

HL_Person COMMA ANY*?{PARTOF(Sentence)} COMMA {->MARK(HL_Person,1,2,3,4)};

HL_CountryAdj HL_BusinessPersonIndicator {->MARK (HL_BusinessPersonIndicator,1,2)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- PERSON POSITIONS ---------------------------------------
// ------------------------------------------------------------------------------------------------

// replaced by dictionary entities 
// W{REGEXP ("глава|председатель|замглавы|зампредседателя|заместитель главы|заместитель председателя")} 
// W{REGEXP ("совета директоров|совдир|наблюдательного совета|правления|производственного совета") -> MARK(HL_Position,1,2)};

// replaced by dictionary entities
// W?{REGEXP ("финансовый|коммерческий|заместитель|бывший|региональный|генеральный")}
// W{REGEXP ("директор|президент|вице президент|начальник|руководитель|заведующий|менеджер")}
// W? HL_CompanyDepartment?{-> MARK(HL_Position,1,2,3,4)};
HL_Position W[0,3]? HL_CompanyDepartment{->MARK(HL_Position,1,2,3)};

HL_Position COMMA HL_Position {->MARK(HL_Position,1,2,3)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- COMPANIES (& organisations) ----------------------------
// ------------------------------------------------------------------------------------------------
// moved up
CW+ {NOT(PARTOF(NamedEntity)) ->MARK(HL_Company,1)};
// moved up
CAP+? {AND(NOT(PARTOF(NamedEntity)),NOT(PARTOF(HL_CompanyIndicator2))) ->MARK(HL_Company,1)};

"\"" HL_Company "\"" {->MARK(HL_Company,1,2,3)};

"\"" CW W+ "\"" {->MARK(HL_Company,1,2,3,4)};

"\"" CAP+ "\"" {->MARK(HL_Company,1,2,3)};

// moved from below
HL_CountryAdj HL_CompanyIndicator1 {-> MARK(HL_CompanyIndicator1,1,2)};

// moved from below
HL_CompanyIndicator1 HL_Country {-> MARK(HL_CompanyIndicator1,1,2)};

HL_CompanyIndicator1 HL_CompanyIndicator2? {-> MARK(HL_CompanyIndicator,1,2)};

//HL_CompanyIndicator1? HL_CompanyIndicator2 {-> MARK(HL_CompanyIndicator,1,2)};
HL_CompanyIndicator2 {NOT(PARTOF(HL_CompanyIndicator))-> MARK(HL_CompanyIndicator,1,2)};

HL_CompanyIndicator CW+ {->MARK(HL_Company,1,2)};

HL_CompanyIndicator CW+? "-" CW {->MARK(HL_Company,1,2,3,4)};

HL_CompanyIndicator CAP+? {->MARK(HL_Company,1,2)};

HL_CompanyIndicator HL_Company {->MARK(HL_Company,1,2)};

HL_Company "[" ANY*? "]" {->MARK(HL_Company,1,2,3,4)};

HL_Company "(" ANY*? ")" {->MARK(HL_Company,1,2,3,4)};

HL_Company "," HL_Company {->MARK(HL_Company,1,2,3)};

HL_Company "и" HL_Company {->MARK(HL_Company,1,2,3)};

// conflict with PC1
HL_Company "," ANY*? "," {->MARK(HL_Company,1,2,3,4)};

HL_CountryAdj W[0,4]? HL_Company {->MARK(HL_Company,1,2,3)};

// HL_Company HL_Company {->MARK(HL_Company,1,2)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- position + company + person ----------------------------
// ------------------------------------------------------------------------------------------------
// PCP1
HL_Position ANY[0,4]? HL_Company {->MARK(HL_Person,1,2,3)};
// PCP2
HL_Position ANY[0,4]? HL_Company HL_Person {->MARK(HL_Person,1,2,3,4)};

// consumed by PCP1 
// HL_Position HL_Company {->MARK(HL_Position,1,2)}; 

// ------------------------------------------------------------------------------------------------
// --------------------------------------- COMPANY ANNOUNCEMENTS ----------------------------------
// ------------------------------------------------------------------------------------------------
// following (commented) rule is expanded to three simple because of
// 1. starting anchor search strategy of TextMarker
// 2. correct assignment of "date" feature 
// TE? Token [0,4]? HL_Company Token [0,4]? TE? HL_AnnouncementIndicator TE? {-> GATHER(HL_CompanyAnnouncement,1,2,3,4,5,6,7, "company" = 3, "date" = 1, "date" = 5, "date" = 7)};
TE ANY[0,4]? HL_Company ANY[0,4]? HL_AnnouncementIndicator {-> GATHER(HL_CompanyAnnouncement,1,2,3,4,5, "company"=3, "date"=1)};
HL_Company ANY[0,4]? TE HL_AnnouncementIndicator {-> GATHER(HL_CompanyAnnouncement,1,2,3,4, "company"=1, "date"=3)};
HL_Company ANY[0,4]? HL_AnnouncementIndicator TE {-> GATHER(HL_CompanyAnnouncement,1,2,3,4, "company"=1, "date"=4)};

HL_AnnouncementIndicator HL_Company {-> GATHER (HL_CompanyAnnouncement,1,2, "company" = 2)};

HL_Company HL_AnnouncementIndicator "пресс" "-" "релиз" {-> GATHER (HL_CompanyAnnouncement,1,2,3,4,5, "company" = 1)};

"пресс" "-" "релиз" HL_Company {-> GATHER (HL_CompanyAnnouncement,1,2,3,4, "company" = 4)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- PERSON ANNOUNCEMENTS -----------------------------------
// ------------------------------------------------------------------------------------------------
TE ANY[0,4]? HL_Person ANY[0,4]? HL_AnnouncementIndicator 
{-> GATHER(HL_PersonAnnouncement,1,2,3,4,5, "person"=3, "date"=1)};

HL_Person ANY[0,4]? TE HL_AnnouncementIndicator {-> GATHER(HL_PersonAnnouncement,1,2,3,4, "person"=1, "date"=3)};

HL_Person ANY[0,4]? HL_AnnouncementIndicator {NOT(PARTOF(HL_PersonAnnouncement))} TE? 
{-> GATHER(HL_PersonAnnouncement,1,2,3,4, "person"=1, "date"=4)};

// TODO refine
HL_AnnouncementIndicator HL_Person TE? {-> GATHER (HL_PersonAnnouncement,1,2,3, "person"=2, "date"=3)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- RESIGNATION --------------------------------------------
// ------------------------------------------------------------------------------------------------
// RES1
HL_Position HL_Company?? HL_Person "был"? "решил"? HL_ResignationIndicator 
W?{REGEXP ("с|от")}
// занимаемой, занимаемого, своей, своего
W?? 
W?{REGEXP("(должност|пост).*") -> GATHER (HL_Resignation,1,2,3,4,5,6,7,8,9, "person" = 3, "position" = 1, "company" = 2)};

// RES2
HL_Person HL_ResignationIndicator W?{REGEXP ("с|от")} W?? W{REGEXP("(должност|пост).*")} HL_Position 
HL_Company {-> GATHER (HL_Resignation,1,2,3,4,5,6,7, "person" = 1, "position" = 6, "company" = 7)};

HL_Person HL_ResignationIndicator{NOT(PARTOF(HL_Resignation))
-> GATHER (HL_Resignation,1,2,"person" = 1)};

HL_Position HL_Company?? HL_Person HL_AnnouncementIndicator ","? 
"что" HL_ResignationIndicator {-> GATHER (HL_Resignation,1,2,3,4,5,6,7,
"person" = 3, "position" = 1, "company" = 2)};

HL_Person HL_AnnouncementIndicator ","? "что" HL_ResignationIndicator 
{NOT(PARTOF(HL_Resignation))-> GATHER (HL_Resignation,1,2,3,4,5, "person" = 1)};

HL_Person HL_AnnouncementIndicator ","? "что" HL_ResignationIndicator W{REGEXP ("с|от")} 
W{REGEXP("(должност|пост).*")} HL_Position HL_Company 
{-> GATHER (HL_Resignation,1,2,3,4,5,6,7,8,9, "person" = 1, "position" = 8, "company" = 9)};

// merged into RES1
// HL_Position HL_Company HL_Person HL_ResignationIndicator W{REGEXP ("с|от")} "занимаемой" 
// W{REGEXP("должность|пост") -> GATHER (HL_Resignation,1,2,3,4,5,6,7,"person" = 3, "position" = 1, "company" = 2)};

// merged into RES1
//HL_Position HL_Company HL_Person HL_ResignationIndicator "свой" 
//W{REGEXP("должность|пост") -> GATHER (HL_Resignation,1,2,3,4,5,6,
//"person" = 3, "position" = 1, "company" = 2)};

// merged into RES2
// HL_Person HL_ResignationIndicator "свой"? W{REGEXP("должность|пост")} HL_Position 
// HL_Company {-> GATHER (HL_Resignation,1,2,3,4,5,6,"person" = 1, "position" = 5, "company" = 6)};

HL_Person HL_ResignationIndicator HL_Person W{REGEXP ("с|от")} W{REGEXP("(должност|пост).*")}
HL_Position HL_Company {-> GATHER (HL_Resignation,1,2,3,4,5,6,7, 
"person" = 3, "position" = 6, "company" = 7, "approvedBy" = 1)};

HL_Person HL_ResignationIndicator HL_Position HL_Company HL_Person W{REGEXP ("с|от")} 
W?? W{REGEXP("(должност|пост).*") -> GATHER (HL_Resignation,1,2,3,4,5,6,7,8,
"person" = 5, "position" = 3, "company" = 4, "approvedBy" = 1)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- ACQUISITIONS -------------------------------------------
// ------------------------------------------------------------------------------------------------
// TODO: WRONG - transfer features
// TE? HL_Acquisition TE? {-> MARK(HL_Acquisition,1,2,3)};

// TODO: WRONG - transfer features
// "за"? HL_PriceUnit? HL_Acquisition "за"? HL_PriceUnit?  {-> MARK(HL_Acquisition,1,2,3,4,5)};

HL_Company TE? "за"? HL_PriceUnit? TE? HL_AcquisitionIndicator TE?  "за"? HL_PriceUnit? 
TE? ANY*? HL_Company {-> MARK(HL_Acquisition,1,2,3,4,5,6,7,8,9,10,11,12)};

// TODO: compare with previous
HL_Company TE? "за"? HL_PriceUnit? TE? HL_AcquisitionIndicator TE?  "за"? HL_PriceUnit? 
TE? ANY*? "бизнес" ANY*? HL_Company? {-> GATHER (HL_Acquisition,1,2,3,4,5,6,7,8,9,10,11,12,13,14, 
"slot1" = 1, "slot2" = 12)};

HL_Company HL_AcquisitionIndicator "c" ANY*? HL_Company {-> MARK(HL_Acquisition,1,2,3,4,5)};

HL_AcquisitionIndicatorS ANY*? HL_Company "c" ANY*? HL_Company {-> MARK(HL_Acquisition,1,2,3,4,5,6)};

HL_Company "("HL_AcquisitionIndicator HL_Company")" {-> GATHER (HL_Acquisition,1,2,3,4,5, "slot1" = 4, "slot2" = 1)};

HL_AcquisitionIndicatorS ANY*? HL_Company ANY*? HL_Company {-> MARK(HL_Acquisition,1,2,3,4,5)};

// TODO merge following 2 rules  
HL_Company "потратила на" HL_AcquisitionIndicatorS ANY*? HL_Company 
HL_PriceUnit? {-> GATHER (HL_Acquisition,1,2,3,4,5,6, "slot1" = 1, "slot2" = 5)};

HL_Company "потрачено на" HL_AcquisitionIndicatorS ANY*? HL_Company 
HL_PriceUnit? {-> GATHER (HL_Acquisition,1,2,3,4,5,6, "slot1" = 1, "slot2" = 5)};

// TODO merge following 2 rules
HL_Company "на" HL_AcquisitionIndicatorS "потратила" ANY*? HL_Company 
HL_PriceUnit? {-> GATHER(HL_Acquisition,1,2,3,4,5,6,7, "slot1" = 1, "slot2" = 6)};

HL_Company "на" HL_AcquisitionIndicatorS "потрачено" ANY*? HL_Company 
HL_PriceUnit? {-> GATHER(HL_Acquisition,1,2,3,4,5,6,7, "slot1" = 1, "slot2" = 6)};

// TODO merge following 2 rules
"на" HL_AcquisitionIndicatorS ANY*? HL_Company ANY*? HL_Company "потратила" 
HL_PriceUnit? {-> GATHER(HL_Acquisition,1,2,3,4,5,6,7, "slot1" = 5, "slot2" = 4)};

"на" HL_AcquisitionIndicatorS ANY*? HL_Company ANY*? HL_Company "потрачено" 
HL_PriceUnit? {-> GATHER(HL_Acquisition,1,2,3,4,5,6,7, "slot1" = 5, "slot2" = 4)};

// ------------------------------------------------------------------------------------------------
// --------------------------------------- POSITION CHANGES ---------------------------------------
// ------------------------------------------------------------------------------------------------
// PC1
HL_Company COMMA "которую" HL_PositionChangeIndicator HL_Person COMMA 
{-> GATHER (HL_PositionChange,1,2,3,4,5,6,"person" = 5, "new company" = 1)};

// PC2
"на"? W?{REGEXP("должность|пост")} HL_Position HL_Company? ANY*? HL_PositionChangeIndicator HL_Position? HL_Company? 
HL_Person {-> GATHER (HL_PositionChange,1,2,3,4,5,6,7,8,9,
"person" = 9, "new position" = 3, "new company" = 4, "old position" = 7, "old company" = 8)};

// PC3
HL_Position? HL_Company? HL_Person ANY*? HL_PositionChangeIndicator "на"? W?{REGEXP("должность|пост")}
HL_Position HL_Company? {-> GATHER (HL_PositionChange,1,2,3,4,5,6,7,8,9,
"person" = 3, "new position" = 8, "new company" = 9, "old position" = 1, "old company" = 2)};

// PC4
HL_Person COMMA HL_Position HL_Company COMMA HL_PositionChangeIndicator "на"? W?{REGEXP("должность|пост")}
HL_Position HL_Company? {-> GATHER (HL_PositionChange,1,2,3,4,5,6,7,8,9,10,
"person" = 1, "new position" = 9, "new company" = 10, "old position" = 3, "old company" = 4)};

// PC5
"на"? W?{REGEXP("должность|пост")} HL_Position HL_Company? ANY*? HL_PositionChangeIndicator 
HL_Person COMMA HL_Position HL_Company COMMA {-> GATHER (HL_PositionChange,1,2,3,4,5,6,7,8,9,10,11, 
"person" = 9, "new position" = 3, "new company" = 4, "old position" = 9, "old company" = 10)};

// TODO transfer features
// TE HL_PositionChange {-> MARK(HL_PositionChange,1,2)};

//