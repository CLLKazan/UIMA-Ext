package ru.kfu.cll.uima.tokenizer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_5
 * on 1/26/13 9:16 PM from the specification file
 * <tt>src/tokenization/JF_Tokenizer.flex</tt>
 */
public class JF_Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 11116384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String yycmap_packed = 
    "\11\0\2\1\1\0\2\1\22\0\1\41\1\13\1\4\2\16\1\42"+
    "\1\16\1\15\2\3\1\16\1\10\1\7\1\11\1\6\1\16\12\12"+
    "\1\40\1\2\1\3\1\16\1\3\1\13\1\17\32\21\1\3\1\5"+
    "\1\3\1\16\1\20\1\15\32\21\1\14\1\16\1\14\1\16\52\0"+
    "\1\5\1\0\1\4\17\0\1\4\u0345\0\1\22\16\0\40\22\1\22"+
    "\1\37\1\35\1\26\1\34\5\22\1\25\1\31\1\24\1\32\2\22"+
    "\1\27\1\23\1\30\1\36\7\22\1\33\4\22\1\0\1\22\u1bc2\0"+
    "\1\2\4\0\1\4\2\0\3\4\7\0\1\2\357\0\1\5\udee9\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] YY_ACTION = yy_unpack_YY_ACTION();

  private static final String YY_ACTION_packed0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\6\1\3\1\7\1\4\1\5\1\6\2\10\4\0"+
    "\1\7\4\0\1\7\6\1\1\0\1\11\1\12\11\0"+
    "\2\7\1\12\1\0\1\1\1\13\5\1\1\11\1\0"+
    "\1\7\16\0\2\1\1\0\1\1\1\14\5\0\1\13"+
    "\3\0\1\15\2\0\1\16\1\0\1\17";

  private static int [] yy_unpack_YY_ACTION() {
    int [] result = new int[92];
    int offset = 0;
    offset = yy_unpack_YY_ACTION(YY_ACTION_packed0, offset, result);
    return result;
  }

  private static int yy_unpack_YY_ACTION(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] yy_rowMap = yy_unpack_yy_rowMap();

  private static final String yy_rowMap_packed0 =
    "\0\0\0\43\0\106\0\151\0\151\0\151\0\151\0\214"+
    "\0\257\0\257\0\322\0\214\0\214\0\214\0\365\0\u0118"+
    "\0\u013b\0\u015e\0\214\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325"+
    "\0\u0348\0\214\0\u036b\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532"+
    "\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\151"+
    "\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u0578\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834"+
    "\0\u0857\0\u087a\0\u089d\0\u08c0\0\u064a\0\u08e3\0\u0906\0\u0929"+
    "\0\u094c\0\u096f\0\151\0\u0992\0\u09b5\0\u09d8\0\u094c\0\u09fb"+
    "\0\u0a1e\0\u09d8\0\u0a41\0\u0a41";

  private static int [] yy_unpack_yy_rowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = yy_unpack_yy_rowMap(yy_rowMap_packed0, offset, result);
    return result;
  }

  private static int yy_unpack_yy_rowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = ((int) packed.charAt(i++)) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] yytrans = yy_unpack_yytrans();

  private static final String yytrans_packed0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\4"+
    "\1\11\1\12\1\13\1\10\1\14\1\15\1\16\1\7"+
    "\1\16\1\17\16\20\1\4\1\3\1\16\1\2\1\21"+
    "\7\0\1\22\1\2\6\0\17\2\1\0\1\21\2\0"+
    "\1\3\37\0\1\3\52\0\1\23\1\0\7\23\1\24"+
    "\2\23\20\0\1\23\6\0\1\23\1\0\2\23\1\25"+
    "\4\23\1\24\2\23\20\0\1\23\1\2\1\26\4\0"+
    "\1\27\1\30\1\23\1\31\1\32\4\23\1\24\1\23"+
    "\1\33\1\2\1\34\1\35\1\36\1\37\1\2\1\40"+
    "\7\2\1\0\1\41\1\42\1\2\1\21\4\0\1\23"+
    "\1\0\1\23\1\31\1\33\4\23\1\24\1\23\1\17"+
    "\16\2\1\0\1\21\1\23\1\2\1\21\7\0\1\22"+
    "\1\2\6\0\1\2\16\20\1\0\1\21\2\0\1\21"+
    "\7\0\1\22\27\0\1\21\1\0\1\43\1\22\10\0"+
    "\1\43\6\0\17\43\1\0\1\22\7\0\1\44\2\0"+
    "\2\44\5\0\2\44\22\0\1\45\4\0\1\46\1\30"+
    "\2\23\1\25\4\23\1\24\2\23\1\0\1\47\1\50"+
    "\1\51\1\52\1\0\1\53\10\0\1\54\1\42\1\0"+
    "\1\26\7\0\1\22\11\0\1\47\1\50\1\51\1\52"+
    "\1\0\1\53\10\0\1\26\7\0\1\23\1\0\2\23"+
    "\1\55\4\23\1\24\2\23\20\0\1\23\12\0\1\56"+
    "\30\0\1\43\1\22\4\0\1\23\1\0\2\23\1\57"+
    "\4\23\1\24\1\23\1\57\16\43\1\0\1\22\1\23"+
    "\1\2\1\26\4\0\1\27\1\30\1\23\1\31\1\32"+
    "\4\23\1\24\1\23\1\33\1\2\1\34\1\35\1\36"+
    "\1\37\1\2\1\40\7\2\1\60\1\41\1\42\1\2"+
    "\1\21\4\0\1\23\1\0\1\23\1\31\1\33\4\23"+
    "\1\24\1\23\1\33\16\2\1\0\1\21\1\23\1\2"+
    "\1\21\7\0\1\22\1\2\6\0\3\2\1\61\13\2"+
    "\1\0\1\21\1\0\1\2\1\21\4\0\1\62\2\0"+
    "\1\22\1\2\6\0\3\2\1\61\4\2\1\63\6\2"+
    "\1\0\1\21\1\0\1\2\1\21\7\0\1\22\1\2"+
    "\6\0\3\2\1\61\1\2\1\61\6\2\1\64\1\65"+
    "\1\2\1\0\1\21\1\0\1\2\1\21\7\0\1\22"+
    "\1\2\6\0\6\2\1\61\10\2\1\0\1\21\1\0"+
    "\1\2\1\21\4\0\1\62\2\0\1\22\1\2\6\0"+
    "\6\2\1\66\3\2\1\67\4\2\1\0\1\21\2\0"+
    "\1\26\7\0\1\22\11\0\1\47\1\50\1\51\1\52"+
    "\1\0\1\53\10\0\1\26\1\70\1\43\10\0\1\22"+
    "\1\43\6\0\17\43\11\0\1\44\2\0\2\44\5\0"+
    "\1\44\1\71\22\0\1\45\21\0\1\47\1\50\1\51"+
    "\1\52\1\0\1\53\10\0\1\45\7\0\1\23\1\0"+
    "\2\23\1\72\4\23\1\24\2\23\20\0\1\23\24\0"+
    "\1\73\24\0\1\62\15\0\1\73\4\0\1\74\35\0"+
    "\1\73\1\0\1\73\6\0\1\75\1\76\33\0\1\73"+
    "\21\0\1\62\20\0\1\77\3\0\1\100\10\0\1\45"+
    "\21\0\1\47\1\50\1\51\1\52\1\0\1\53\10\0"+
    "\1\45\1\70\1\0\1\45\4\0\1\101\1\0\2\23"+
    "\1\55\4\23\1\24\2\23\1\0\1\47\1\50\1\51"+
    "\1\52\1\0\1\53\10\0\1\54\1\42\1\0\1\45"+
    "\10\0\1\56\10\0\1\47\1\50\1\51\1\52\1\0"+
    "\1\53\10\0\1\54\1\70\1\43\5\0\1\23\1\0"+
    "\1\23\1\31\1\57\4\23\1\24\1\23\1\57\16\43"+
    "\2\0\1\23\12\0\1\102\30\0\1\2\1\21\4\0"+
    "\1\62\2\0\1\22\1\2\6\0\17\2\1\0\1\21"+
    "\2\0\1\103\21\0\1\104\1\105\1\106\1\107\1\0"+
    "\1\110\10\0\1\103\1\0\1\2\1\21\7\0\1\22"+
    "\1\2\6\0\6\2\1\111\2\2\1\112\5\2\1\0"+
    "\1\21\1\0\1\2\1\21\4\0\1\113\2\0\1\22"+
    "\1\2\6\0\17\2\1\0\1\21\1\0\1\2\1\21"+
    "\7\0\1\22\1\2\6\0\16\2\1\64\1\0\1\21"+
    "\1\0\1\2\1\21\7\0\1\22\1\2\6\0\10\2"+
    "\1\114\6\2\1\0\1\21\1\0\1\2\1\21\7\0"+
    "\1\22\1\2\6\0\2\2\1\112\14\2\1\0\1\21"+
    "\7\0\1\44\2\0\2\44\5\0\1\44\1\115\22\0"+
    "\1\45\4\0\1\23\1\0\2\23\1\72\4\23\1\24"+
    "\2\23\1\0\1\47\1\50\1\51\1\52\1\0\1\53"+
    "\10\0\1\54\1\42\6\0\1\62\63\0\1\116\2\0"+
    "\1\117\16\0\1\113\73\0\1\75\34\0\1\120\34\0"+
    "\1\117\25\0\1\23\1\0\2\23\1\121\4\23\1\24"+
    "\2\23\20\0\1\23\12\0\1\122\54\0\1\110\24\0"+
    "\1\123\15\0\1\110\42\0\1\110\1\0\1\110\6\0"+
    "\1\75\1\76\33\0\1\110\21\0\1\123\34\0\1\2"+
    "\1\21\7\0\1\22\1\2\6\0\13\2\1\112\3\2"+
    "\1\0\1\21\1\0\1\2\1\21\4\0\1\124\2\0"+
    "\1\22\1\2\6\0\17\2\1\0\1\21\2\0\1\113"+
    "\21\0\1\104\1\105\1\125\1\107\1\0\1\110\10\0"+
    "\1\113\1\0\1\2\1\21\7\0\1\22\1\2\6\0"+
    "\11\2\1\112\5\2\1\0\1\21\35\0\1\117\14\0"+
    "\1\124\66\0\1\117\16\0\1\126\1\0\2\23\1\127"+
    "\4\23\1\24\2\23\20\0\1\23\12\0\1\122\25\0"+
    "\1\130\3\0\1\124\21\0\1\47\1\131\1\51\1\52"+
    "\1\0\1\73\10\0\1\124\25\0\1\110\1\0\1\110"+
    "\22\0\1\23\1\0\2\23\1\132\4\23\1\24\2\23"+
    "\20\0\1\23\12\0\1\133\36\0\1\62\15\0\1\73"+
    "\30\0\1\134\30\0";

  private static int [] yy_unpack_yytrans() {
    int [] result = new int[2660];
    int offset = 0;
    offset = yy_unpack_yytrans(yytrans_packed0, offset, result);
    return result;
  }

  private static int yy_unpack_yytrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_NO_MATCH = 1;
  private static final int YY_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] YY_ATTRIBUTE = yy_unpack_YY_ATTRIBUTE();

  private static final String YY_ATTRIBUTE_packed0 =
    "\1\0\2\1\4\11\11\1\4\0\1\1\4\0\7\1"+
    "\1\0\2\1\11\0\3\1\1\0\7\1\1\11\1\0"+
    "\1\1\16\0\2\1\1\0\2\1\5\0\1\11\3\0"+
    "\1\1\2\0\1\1\1\0\1\1";

  private static int [] yy_unpack_YY_ATTRIBUTE() {
    int [] result = new int[92];
    int offset = 0;
    offset = yy_unpack_YY_ATTRIBUTE(YY_ATTRIBUTE_packed0, offset, result);
    return result;
  }

  private static int yy_unpack_YY_ATTRIBUTE(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
	public boolean isEof() {
		return yy_atEOF;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JF_Tokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JF_Tokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public TokenInfo yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    int [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_currentPos_l = yy_currentPos = yy_startRead = yy_markedPos_l;
  
      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action < 0 ? yy_action : YY_ACTION[yy_action]) {
        case 9: 
          { return (new TokenInfo("PERCENTS",yy_currentPos,yy_currentPos+yylength())); }
        case 16: break;
        case 8: 
          { return (new TokenInfo("LETTERS",yy_currentPos,yy_currentPos+yylength())); }
        case 17: break;
        case 15: 
          { return (new TokenInfo("TIME",yy_currentPos,yy_currentPos+yylength())); }
        case 18: break;
        case 7: 
          { return (new TokenInfo("NUMBER",yy_currentPos,yy_currentPos+yylength())); }
        case 19: break;
        case 12: 
          { return (new TokenInfo("EMAIL",yy_currentPos,yy_currentPos+yylength())); }
        case 20: break;
        case 11: 
          { return (new TokenInfo("MEASUREMENT",yy_currentPos,yy_currentPos+yylength())); }
        case 21: break;
        case 5: 
          { return (new TokenInfo("QM",yy_currentPos,yy_currentPos+yylength())); }
        case 22: break;
        case 1: 
          { return (new TokenInfo("TOKEN",yy_currentPos,yy_currentPos+yylength())); }
        case 23: break;
        case 3: 
          { return (new TokenInfo("PM",yy_currentPos,yy_currentPos+yylength())); }
        case 24: break;
        case 2: 
          { return (new TokenInfo("WHITESPACE",yy_currentPos,yy_currentPos+yylength())); }
        case 25: break;
        case 4: 
          { return (new TokenInfo("PR",yy_currentPos,yy_currentPos+yylength())); }
        case 26: break;
        case 6: 
          { return (new TokenInfo("SPECIAL_SYMBOL",yy_currentPos,yy_currentPos+yylength())); }
        case 27: break;
        case 10: 
          { return (new TokenInfo("COMPLEXWORD",yy_currentPos,yy_currentPos+yylength())); }
        case 28: break;
        case 14: 
          { return (new TokenInfo("IP",yy_currentPos,yy_currentPos+yylength())); }
        case 29: break;
        case 13: 
          { return (new TokenInfo("DATE",yy_currentPos,yy_currentPos+yylength())); }
        case 30: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
              { return null;
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java JF_Tokenizer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        JF_Tokenizer scanner = null;
        try {
          scanner = new JF_Tokenizer( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
