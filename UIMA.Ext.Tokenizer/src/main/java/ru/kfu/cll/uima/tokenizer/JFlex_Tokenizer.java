/* The following code was generated by JFlex 1.4.3 on 26.03.13 17:30 */

// Sidikov Marsel

package ru.kfu.cll.uima.tokenizer;
import ru.kfu.cll.uima.tokenizer.types.Token;
import ru.kfu.cll.uima.tokenizer.types.Letters;
import ru.kfu.cll.uima.tokenizer.types.Number;
import ru.kfu.cll.uima.tokenizer.types.Separator;
import ru.kfu.cll.uima.tokenizer.types.PM;
import ru.kfu.cll.uima.tokenizer.types.Bracket;
import ru.kfu.cll.uima.tokenizer.types.Symbol;
import ru.kfu.cll.uima.tokenizer.types.Range;
import ru.kfu.cll.uima.tokenizer.types.Abbrevation;
import ru.kfu.cll.uima.tokenizer.types.Currensy;
import ru.kfu.cll.uima.tokenizer.types.Measurement;
import ru.kfu.cll.uima.tokenizer.types.ComplexWord;
import ru.kfu.cll.uima.tokenizer.types.Date;
import ru.kfu.cll.uima.tokenizer.types.Email;
import ru.kfu.cll.uima.tokenizer.types.Abbrevation;
import org.apache.uima.jcas.JCas;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26.03.13 17:30 from the specification file
 * <tt>data/jflex/JFlex_Tokenizer.flex</tt>
 */
public class JFlex_Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_DATE_YMD = 10;
  public static final int IN_RANGE = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_COMPLEX = 8;
  public static final int IN_PERCENTS = 14;
  public static final int IN_CURRENSY = 4;
  public static final int IN_DATE_DMY = 12;
  public static final int IN_MEAS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\5\1\2\22\0\1\4\1\63\1\64"+
    "\1\14\1\55\1\14\1\14\1\0\2\60\1\14\1\11\1\6\1\12"+
    "\1\7\1\46\1\10\1\44\1\30\1\45\1\32\1\43\1\43\3\43"+
    "\1\53\1\53\1\64\1\14\1\64\1\63\1\54\1\35\1\35\1\16"+
    "\1\35\1\21\1\35\2\35\1\26\3\35\1\35\1\22\1\35\1\27"+
    "\1\35\1\20\1\23\1\35\1\17\3\35\1\24\1\35\1\61\1\36"+
    "\1\47\1\65\1\25\1\36\1\50\1\42\1\106\1\42\1\104\7\42"+
    "\1\51\1\102\1\103\1\52\3\42\1\105\4\42\1\77\1\42\1\62"+
    "\1\56\1\31\1\56\44\36\1\37\1\36\1\37\5\36\1\33\4\36"+
    "\1\33\12\36\1\33\u0345\36\1\41\16\36\21\34\1\34\16\34\1\40"+
    "\1\76\1\40\1\75\1\67\1\40\1\66\1\40\1\100\3\40\1\74"+
    "\1\40\1\101\1\71\1\72\1\73\1\70\15\40\1\0\1\40\u1bc2\0"+
    "\1\57\21\0\1\53\174\0\1\15\10\0\1\15\151\0\1\64\373\0"+
    "\1\13\udded\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\7\1\1\2\11\2\12\1\1\1\10"+
    "\1\13\1\10\1\11\1\14\1\1\1\11\1\15\1\16"+
    "\1\17\1\10\1\1\1\13\2\17\2\11\1\13\1\11"+
    "\7\15\1\17\1\20\1\1\1\21\2\1\1\22\1\23"+
    "\1\1\1\24\1\25\1\26\1\27\1\1\3\30\1\1"+
    "\3\31\4\0\1\10\1\0\2\32\1\0\1\10\2\33"+
    "\1\0\1\32\3\0\2\12\1\34\1\35\2\0\1\10"+
    "\3\0\1\10\1\14\1\34\1\16\1\36\1\17\1\0"+
    "\1\17\1\0\1\32\3\0\1\15\3\0\1\17\2\0"+
    "\1\37\1\23\1\40\1\41\1\24\1\40\1\26\1\42"+
    "\1\27\2\30\1\0\1\43\1\31\2\0\2\44\4\0"+
    "\1\45\2\0\1\45\5\0\1\32\1\46\2\0\1\46"+
    "\1\12\1\46\2\44\1\0\1\10\3\0\2\45\5\0"+
    "\1\17\1\47\1\32\1\50\3\0\1\17\1\51\1\52"+
    "\4\0\2\44\2\45\6\0\2\53\2\46\1\12\1\46"+
    "\1\0\1\10\1\45\2\0\1\54\1\55\1\56\1\57"+
    "\1\45\1\0\2\45\1\12\5\0\1\45\4\0\1\12"+
    "\2\0\3\45\13\0\1\12\3\0\1\45\2\0\1\45"+
    "\11\0\1\12\1\60\3\0\6\61\4\0\1\60\15\0"+
    "\2\60\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u0238\0\u027f"+
    "\0\u02c6\0\u030d\0\u0354\0\u0238\0\u039b\0\u03e2\0\u0429\0\u0470"+
    "\0\u04b7\0\u0470\0\u04fe\0\u0545\0\u058c\0\u0545\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0238\0\u0545\0\u0736\0\u077d\0\u01f1"+
    "\0\u07c4\0\u01f1\0\u0470\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927"+
    "\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f"+
    "\0\u01f1\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50"+
    "\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0238"+
    "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u01f1\0\u0238\0\u10eb"+
    "\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514"+
    "\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u0661\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u1821\0\u1821\0\u1868\0\u18af\0\u18f6"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e"+
    "\0\u0bed\0\u1b75\0\u1bbc\0\u0cc2\0\u1c03\0\u1c4a\0\u1c91\0\u01f1"+
    "\0\u1cd8\0\u1cd8\0\u01f1\0\u1d1f\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c"+
    "\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264"+
    "\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c"+
    "\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4"+
    "\0\u271b\0\u2762\0\u27a9\0\u0238\0\u27f0\0\u01f1\0\u2837\0\u287e"+
    "\0\u28c5\0\u290c\0\u1a59\0\u1aa0\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u22ab\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2953\0\u01f1\0\u01f1"+
    "\0\u2a28\0\u2ffb\0\u3042\0\u2ca7\0\u2cee\0\u3089\0\u30d0\0\u3117"+
    "\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f"+
    "\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587"+
    "\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf"+
    "\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7"+
    "\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f"+
    "\0\u3c76\0\u3cbd\0\u3d04\0\u0238\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20"+
    "\0\u0238\0\u3e67\0\u3eae\0\u01f1\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca"+
    "\0\u4011\0\u01f1\0\u4058\0\u409f\0\u40e6\0\u412d\0\u3e20\0\u3e67"+
    "\0\u3eae\0\u3ef5\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u4202"+
    "\0\u4249\0\u42d7\0\u431e\0\u4365";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\6\27"+
    "\1\30\2\27\1\31\1\32\1\33\1\34\1\35\1\27"+
    "\1\36\1\37\1\40\1\41\1\42\1\33\1\31\1\43"+
    "\1\44\1\45\1\46\1\42\1\47\1\16\1\50\1\51"+
    "\1\30\1\16\1\52\1\45\1\32\1\17\1\50\1\53"+
    "\1\54\1\55\1\56\1\55\1\40\1\57\1\40\1\60"+
    "\1\61\1\42\1\62\1\40\2\42\1\63\2\42\10\10"+
    "\1\64\1\65\16\10\1\64\1\10\1\64\10\10\3\64"+
    "\51\10\1\66\1\67\2\70\1\10\1\71\12\10\1\66"+
    "\1\10\1\66\4\10\1\71\3\10\3\66\7\10\1\71"+
    "\156\10\7\72\1\73\2\72\1\10\1\73\1\10\1\73"+
    "\1\74\1\72\2\73\1\75\1\76\1\77\4\10\1\73"+
    "\3\77\3\10\1\73\2\10\2\73\2\10\1\73\11\75"+
    "\1\77\2\75\5\77\10\10\1\100\17\10\1\101\1\10"+
    "\1\102\10\10\1\102\1\101\1\103\51\10\1\104\17\10"+
    "\1\105\1\10\1\106\10\10\1\106\1\105\1\107\41\10"+
    "\116\0\4\110\1\0\1\110\1\0\15\110\2\0\1\110"+
    "\4\0\5\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\6\0"+
    "\1\112\1\113\1\114\1\110\1\115\1\0\1\110\1\116"+
    "\12\110\1\114\1\110\1\114\2\0\1\110\1\0\1\116"+
    "\2\0\1\110\3\114\1\110\1\0\3\110\1\0\1\111"+
    "\1\117\1\110\1\120\2\0\2\110\1\0\1\110\11\0"+
    "\1\110\2\0\5\110\7\0\1\110\1\121\2\110\1\0"+
    "\1\110\1\0\12\110\1\121\1\110\1\121\2\0\1\110"+
    "\4\0\1\110\3\121\1\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\7\0\1\110\1\122\2\110\1\0\1\110\1\0"+
    "\12\110\1\122\1\110\1\122\2\0\1\110\4\0\1\110"+
    "\3\122\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\10\0"+
    "\1\123\17\0\1\123\1\0\1\123\10\0\3\123\45\0"+
    "\1\124\3\0\1\125\1\126\2\127\14\0\1\125\1\0"+
    "\1\125\10\0\3\125\50\0\3\110\1\130\1\0\1\110"+
    "\1\0\1\131\1\132\5\131\1\110\2\131\3\110\2\0"+
    "\1\131\2\0\1\133\1\0\1\134\4\110\1\0\3\134"+
    "\1\0\1\111\2\110\1\135\2\0\2\110\1\0\1\110"+
    "\11\133\1\134\2\133\5\134\7\0\3\110\1\130\1\0"+
    "\1\110\1\0\7\131\1\110\2\131\3\110\2\0\1\131"+
    "\2\0\1\133\1\0\1\134\4\110\1\0\3\134\1\0"+
    "\1\111\2\110\1\135\2\0\2\110\1\0\1\110\11\133"+
    "\1\134\2\133\5\134\7\0\4\110\1\0\1\110\1\0"+
    "\15\110\2\0\1\110\2\0\1\133\1\0\5\110\1\0"+
    "\3\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\133\1\110\2\133\5\110\6\0\1\112\1\136\1\137"+
    "\1\110\1\140\1\141\1\110\1\116\12\110\1\137\1\110"+
    "\1\137\2\0\1\110\1\0\1\116\2\0\1\110\3\137"+
    "\1\142\1\0\3\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\6\0\1\112\1\136\1\143\1\110\1\140\1\141\1\110"+
    "\1\116\12\110\1\143\1\110\1\143\2\0\1\110\1\0"+
    "\1\116\2\0\1\110\3\143\1\142\1\0\3\110\1\0"+
    "\1\111\1\117\1\110\1\120\2\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\40\0\1\133\25\0\11\133"+
    "\1\0\2\133\17\0\1\135\21\0\1\144\3\0\1\145"+
    "\1\146\15\0\1\135\6\0\11\145\1\0\2\145\11\0"+
    "\1\124\3\0\1\125\1\126\2\127\14\0\1\125\1\0"+
    "\1\125\5\0\1\133\2\0\3\125\20\0\11\133\1\0"+
    "\2\133\17\0\1\135\21\0\1\146\3\0\1\40\1\146"+
    "\15\0\1\135\6\0\11\40\1\0\2\40\17\0\1\135"+
    "\21\0\1\146\3\0\1\145\1\146\15\0\1\135\6\0"+
    "\11\145\1\0\2\145\14\0\3\110\1\130\1\0\1\110"+
    "\1\0\7\147\1\110\2\147\3\110\2\0\1\147\2\0"+
    "\1\133\1\0\1\150\4\110\1\0\3\150\1\0\1\111"+
    "\2\110\1\135\2\0\2\110\1\0\1\110\11\133\1\150"+
    "\2\133\5\150\6\0\1\112\1\136\1\137\1\110\1\140"+
    "\1\141\1\110\1\116\12\110\1\143\1\110\1\143\2\0"+
    "\1\110\1\0\1\116\2\0\1\110\1\143\1\137\1\143"+
    "\1\142\1\0\3\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\7\0\1\151\2\110\1\130\1\0\1\110\1\0\7\147"+
    "\1\110\2\147\3\110\2\0\1\147\2\0\1\133\1\0"+
    "\1\150\4\110\1\0\3\150\1\0\1\111\2\110\1\135"+
    "\2\0\2\110\1\0\1\110\11\133\1\150\2\133\1\152"+
    "\4\150\7\0\1\153\2\110\1\130\1\0\1\110\1\0"+
    "\7\147\1\110\2\147\3\110\2\0\1\147\2\0\1\133"+
    "\1\0\1\150\4\110\1\0\3\150\1\0\1\111\2\110"+
    "\1\135\2\0\2\110\1\0\1\110\11\133\1\150\2\133"+
    "\5\150\4\0\1\124\2\0\1\110\1\154\1\155\1\156"+
    "\1\127\1\110\1\0\12\110\1\154\1\110\1\154\2\0"+
    "\1\110\4\0\1\110\3\154\1\110\1\0\3\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\2\0\5\110\12\0\1\135\21\0\1\146\3\0\1\40"+
    "\1\146\4\0\1\157\10\0\1\135\6\0\11\40\1\0"+
    "\2\40\17\0\1\135\21\0\1\146\3\0\1\40\1\146"+
    "\15\0\1\135\6\0\4\40\1\160\4\40\1\0\2\40"+
    "\14\0\1\161\2\0\1\135\21\0\1\146\3\0\1\40"+
    "\1\146\15\0\1\135\6\0\11\40\1\0\2\40\17\0"+
    "\1\135\21\0\1\146\3\0\1\40\1\146\15\0\1\135"+
    "\6\0\6\40\1\160\2\40\1\0\2\40\17\0\1\135"+
    "\21\0\1\146\3\0\1\40\1\146\15\0\1\135\6\0"+
    "\7\40\1\160\1\40\1\0\2\40\17\0\1\135\21\0"+
    "\1\146\3\0\1\40\1\146\4\0\1\162\10\0\1\135"+
    "\6\0\11\40\1\0\2\40\14\0\1\163\2\0\1\135"+
    "\21\0\1\146\3\0\1\40\1\146\15\0\1\135\6\0"+
    "\11\40\1\0\2\40\14\0\3\110\1\130\1\0\1\110"+
    "\1\0\7\147\1\110\2\147\3\110\2\0\1\147\2\0"+
    "\1\133\1\0\1\150\4\110\1\0\3\150\1\0\1\111"+
    "\2\110\1\135\2\0\2\110\1\0\1\110\11\133\1\150"+
    "\2\133\3\150\1\164\1\150\6\0\2\165\1\64\17\0"+
    "\1\64\1\0\1\64\10\0\3\64\51\0\1\64\17\0"+
    "\1\64\1\0\1\64\10\0\3\64\47\0\2\166\1\66"+
    "\17\0\1\66\1\0\1\66\10\0\3\66\51\0\1\66"+
    "\17\0\1\66\1\0\1\66\10\0\3\66\51\0\1\167"+
    "\17\0\1\167\1\0\1\167\10\0\3\167\57\0\7\170"+
    "\1\0\2\170\5\0\1\170\2\0\1\171\1\0\1\172"+
    "\5\0\3\172\13\0\11\171\1\172\2\171\5\172\40\0"+
    "\1\171\25\0\11\171\1\0\2\171\41\0\1\173\3\0"+
    "\1\174\1\175\24\0\11\174\1\0\2\174\41\0\1\175"+
    "\3\0\1\75\1\175\24\0\11\75\1\0\2\75\41\0"+
    "\1\175\3\0\1\174\1\175\24\0\11\174\1\0\2\174"+
    "\23\0\7\176\1\0\2\176\5\0\1\176\2\0\1\171"+
    "\1\0\1\177\5\0\3\177\13\0\11\171\1\177\2\171"+
    "\5\177\10\0\1\200\17\0\1\200\1\0\1\200\10\0"+
    "\3\200\51\0\1\201\17\0\1\201\1\0\1\201\10\0"+
    "\3\201\51\0\1\202\17\0\1\202\1\0\1\202\10\0"+
    "\3\202\51\0\1\201\17\0\1\202\1\0\1\202\10\0"+
    "\1\202\1\201\1\202\51\0\1\203\17\0\1\203\1\0"+
    "\1\203\10\0\3\203\51\0\1\204\17\0\1\204\1\0"+
    "\1\204\10\0\3\204\51\0\1\205\17\0\1\205\1\0"+
    "\1\205\10\0\3\205\51\0\1\204\17\0\1\205\1\0"+
    "\1\205\10\0\1\205\1\204\1\205\50\0\2\206\1\0"+
    "\1\206\3\0\13\206\1\0\1\206\2\0\1\206\4\0"+
    "\4\206\2\0\3\206\24\0\1\206\2\0\5\206\10\0"+
    "\1\207\17\0\1\207\1\0\1\207\10\0\3\207\50\0"+
    "\1\110\1\210\2\110\1\0\1\110\1\0\12\110\1\210"+
    "\1\110\1\210\2\0\1\110\4\0\1\110\3\210\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\6\0\1\112\1\211"+
    "\1\121\1\110\1\212\1\213\1\110\1\116\12\110\1\121"+
    "\1\110\1\121\2\0\1\110\1\0\1\116\2\0\1\110"+
    "\3\121\1\214\1\0\3\110\1\0\1\111\1\117\1\110"+
    "\1\120\2\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\7\0\1\110\1\215\2\216\1\217\1\110\1\0"+
    "\12\110\1\215\1\110\1\215\2\0\1\110\4\0\1\110"+
    "\3\215\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\10\0"+
    "\1\220\3\217\14\0\1\220\1\0\1\220\10\0\3\220"+
    "\47\0\1\112\1\113\1\121\1\110\1\115\1\0\1\110"+
    "\1\116\12\110\1\121\1\110\1\121\2\0\1\110\1\0"+
    "\1\116\2\0\1\110\3\121\1\110\1\0\3\110\1\0"+
    "\1\111\1\117\1\110\1\120\2\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\4\0\1\221\1\0\1\222"+
    "\1\223\1\122\1\110\1\115\1\0\1\110\1\116\12\110"+
    "\1\122\1\110\1\122\2\0\1\110\1\0\1\116\2\0"+
    "\1\110\3\122\1\110\1\0\3\110\1\0\1\111\1\117"+
    "\1\110\1\120\2\0\2\110\1\0\1\110\11\0\1\110"+
    "\2\0\5\110\4\0\1\221\1\0\2\222\1\123\1\0"+
    "\1\120\2\0\1\116\12\0\1\123\1\0\1\123\4\0"+
    "\1\116\3\0\3\123\7\0\1\116\1\0\1\120\37\0"+
    "\1\224\1\225\2\127\14\0\1\224\1\0\1\224\10\0"+
    "\3\224\51\0\1\125\17\0\1\125\1\0\1\125\10\0"+
    "\3\125\51\0\1\226\17\0\1\226\1\0\1\226\10\0"+
    "\3\226\50\0\4\110\1\0\1\110\1\0\7\227\1\230"+
    "\2\227\1\110\1\230\1\110\1\231\1\232\1\227\2\231"+
    "\2\232\1\227\4\110\1\231\3\227\1\0\1\111\1\110"+
    "\1\230\2\0\1\231\1\230\1\110\1\0\1\230\11\232"+
    "\1\227\2\232\5\227\7\0\3\110\1\130\1\0\1\110"+
    "\1\0\7\131\1\110\2\131\3\110\2\0\1\131\4\0"+
    "\1\147\4\110\1\0\3\147\1\0\1\111\2\110\1\135"+
    "\2\0\2\110\1\0\1\110\11\0\1\147\2\0\5\147"+
    "\7\0\3\110\1\130\1\0\1\110\1\0\2\131\1\233"+
    "\4\131\1\110\2\131\3\110\2\0\1\131\4\0\1\147"+
    "\4\110\1\0\3\147\1\0\1\111\2\110\1\135\2\0"+
    "\2\110\1\0\1\110\11\0\1\147\2\0\5\147\12\0"+
    "\1\135\25\0\1\133\16\0\1\135\6\0\11\133\1\0"+
    "\2\133\14\0\3\110\1\130\1\0\1\110\1\0\7\147"+
    "\1\110\2\147\3\110\2\0\1\147\4\0\1\134\4\110"+
    "\1\0\3\134\1\0\1\111\2\110\1\135\2\0\2\110"+
    "\1\0\1\110\11\0\1\134\2\0\5\134\16\0\7\234"+
    "\1\231\2\234\1\0\1\231\1\0\1\231\1\232\1\234"+
    "\2\231\2\232\1\234\4\0\1\231\3\234\3\0\1\231"+
    "\2\0\2\231\2\0\1\231\11\232\1\234\2\232\5\234"+
    "\7\0\1\110\1\210\2\110\1\0\1\110\1\0\12\110"+
    "\1\235\1\110\1\235\2\0\1\110\4\0\1\110\1\235"+
    "\1\236\1\235\1\110\1\0\3\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\6\0\1\112\1\237\1\240\1\110\1\241\1\242\1\110"+
    "\1\116\12\110\1\240\1\110\1\240\2\0\1\110\1\0"+
    "\1\116\2\0\1\110\3\240\1\243\1\0\3\110\1\0"+
    "\1\111\1\117\1\110\1\120\2\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\7\0\1\110\1\215\2\216"+
    "\1\217\1\110\1\0\12\110\1\244\1\110\1\244\2\0"+
    "\1\110\4\0\1\110\1\244\1\245\1\244\1\110\1\0"+
    "\3\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\30\0\1\246\1\0\1\246"+
    "\10\0\1\246\1\247\1\246\50\0\4\110\1\0\1\110"+
    "\1\0\12\110\1\250\1\110\1\250\2\0\1\110\4\0"+
    "\1\110\1\250\1\251\1\250\1\110\1\0\3\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\2\0\5\110\6\0\1\112\1\113\1\240\1\110\1\115"+
    "\1\0\1\110\1\116\12\110\1\240\1\110\1\240\2\0"+
    "\1\110\1\0\1\116\2\0\1\110\3\240\1\110\1\0"+
    "\3\110\1\0\1\111\1\117\1\110\1\120\2\0\2\110"+
    "\1\0\1\110\11\0\1\110\2\0\5\110\12\0\1\135"+
    "\21\0\1\144\3\0\2\146\15\0\1\135\6\0\11\146"+
    "\1\0\2\146\17\0\1\135\21\0\1\146\3\0\2\146"+
    "\15\0\1\135\6\0\11\146\1\0\2\146\14\0\3\110"+
    "\1\130\1\0\1\110\1\0\7\147\1\110\2\147\3\110"+
    "\2\0\1\147\4\0\1\147\4\110\1\0\3\147\1\0"+
    "\1\111\2\110\1\135\2\0\2\110\1\0\1\110\11\0"+
    "\1\147\2\0\5\147\7\0\3\110\1\130\1\0\1\110"+
    "\1\0\7\147\1\110\2\147\3\110\2\0\1\147\4\0"+
    "\1\150\4\110\1\0\3\150\1\0\1\111\2\110\1\135"+
    "\2\0\2\110\1\0\1\110\11\0\1\150\2\0\5\150"+
    "\7\0\4\110\1\0\1\110\1\0\15\110\2\0\1\110"+
    "\4\0\5\110\1\0\1\110\1\252\1\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\7\0\3\110\1\130\1\0\1\110\1\0\7\147"+
    "\1\110\2\147\3\110\2\0\1\147\4\0\1\150\4\110"+
    "\1\0\3\150\1\0\1\111\2\110\1\135\2\0\2\110"+
    "\1\0\1\110\11\0\1\150\2\0\1\150\1\253\3\150"+
    "\7\0\4\110\1\0\1\110\1\0\15\110\2\0\1\110"+
    "\4\0\5\110\1\0\1\110\1\254\1\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\7\0\1\110\1\154\2\110\1\0\1\110\1\0"+
    "\12\110\1\154\1\110\1\154\2\0\1\110\4\0\1\110"+
    "\3\154\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\7\0"+
    "\1\110\1\255\2\110\1\0\1\110\1\0\12\110\1\255"+
    "\1\110\1\255\2\0\1\110\4\0\1\110\3\255\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\67\0\1\256\26\0"+
    "\1\256\2\0\1\135\21\0\1\146\3\0\1\40\1\146"+
    "\15\0\1\135\6\0\11\40\1\0\2\40\11\0\1\257"+
    "\62\0\1\260\1\0\1\260\114\0\1\256\13\0\1\261"+
    "\74\0\1\260\14\0\3\110\1\130\1\0\1\110\1\0"+
    "\7\147\1\110\2\147\3\110\2\0\1\147\4\0\1\150"+
    "\4\110\1\0\3\150\1\0\1\111\2\110\1\135\2\0"+
    "\2\110\1\0\1\110\11\0\1\150\2\0\4\150\1\262"+
    "\10\0\1\263\17\0\1\263\1\0\1\263\10\0\3\263"+
    "\51\0\1\264\17\0\1\264\1\0\1\264\10\0\3\264"+
    "\47\0\2\265\1\167\17\0\1\167\1\0\1\167\10\0"+
    "\3\167\57\0\7\170\1\0\2\170\5\0\1\170\4\0"+
    "\1\176\5\0\3\176\24\0\1\176\2\0\5\176\16\0"+
    "\7\176\1\0\2\176\5\0\1\176\4\0\1\172\5\0"+
    "\3\172\24\0\1\172\2\0\5\172\34\0\1\173\3\0"+
    "\2\175\24\0\11\175\1\0\2\175\41\0\1\175\3\0"+
    "\2\175\24\0\11\175\1\0\2\175\23\0\7\176\1\0"+
    "\2\176\5\0\1\176\4\0\1\176\5\0\3\176\24\0"+
    "\1\176\2\0\5\176\16\0\7\176\1\0\2\176\5\0"+
    "\1\176\4\0\1\177\5\0\3\177\24\0\1\177\2\0"+
    "\5\177\10\0\1\266\17\0\1\266\1\0\1\266\10\0"+
    "\3\266\51\0\1\267\17\0\1\267\1\0\1\267\10\0"+
    "\3\267\50\0\2\206\1\0\1\206\3\0\7\270\1\206"+
    "\2\270\1\206\1\0\1\206\2\0\1\270\4\0\1\270"+
    "\3\206\2\0\3\270\24\0\1\270\2\0\5\270\4\0"+
    "\1\221\3\0\1\207\1\0\1\120\2\0\1\116\12\0"+
    "\1\207\1\0\1\207\4\0\1\116\3\0\3\207\7\0"+
    "\1\116\1\0\1\120\33\0\1\221\2\0\1\110\1\210"+
    "\1\110\1\115\1\0\1\110\1\116\12\110\1\210\1\110"+
    "\1\210\2\0\1\110\1\0\1\116\2\0\1\110\3\210"+
    "\1\110\1\0\3\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\7\0\1\110\1\271\2\110\1\0\1\110\1\0\12\110"+
    "\1\210\1\110\1\210\2\0\1\110\4\0\1\110\1\210"+
    "\1\272\1\210\1\110\1\0\3\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\7\0\1\110\1\273\2\216\1\217\1\110\1\0\12\110"+
    "\1\215\1\110\1\215\2\0\1\110\4\0\1\110\1\215"+
    "\1\274\1\215\1\110\1\0\3\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\10\0\1\275\33\0\1\276\51\0\1\110\1\277\2\110"+
    "\1\0\1\110\1\0\15\110\2\0\1\110\4\0\2\110"+
    "\1\300\2\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\6\0"+
    "\1\301\1\302\1\215\2\110\1\0\1\110\1\0\12\110"+
    "\1\215\1\110\1\215\2\0\1\110\4\0\1\110\3\215"+
    "\1\110\1\0\3\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\2\0\5\110\7\0\1\110"+
    "\1\215\2\110\1\0\1\110\1\0\12\110\1\215\1\110"+
    "\1\215\2\0\1\110\4\0\1\110\3\215\1\110\1\0"+
    "\3\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\10\0\1\220\17\0\1\220"+
    "\1\0\1\220\10\0\3\220\47\0\2\301\1\220\17\0"+
    "\1\220\1\0\1\220\10\0\3\220\56\0\1\116\21\0"+
    "\1\116\15\0\1\116\41\0\1\303\17\0\1\303\1\0"+
    "\1\303\10\0\3\303\50\0\1\110\1\304\2\110\1\0"+
    "\1\110\1\0\12\110\1\304\1\110\1\304\2\0\1\110"+
    "\4\0\1\110\3\304\1\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\6\0\2\126\1\224\17\0\1\224\1\0\1\224"+
    "\10\0\3\224\51\0\1\224\17\0\1\224\1\0\1\224"+
    "\10\0\3\224\47\0\2\126\1\226\17\0\1\226\1\0"+
    "\1\226\10\0\3\226\50\0\4\110\1\0\1\110\1\0"+
    "\7\305\1\110\2\305\3\110\2\0\1\305\2\0\1\306"+
    "\1\0\1\305\4\110\1\0\3\305\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\306\1\305\2\306\5\305"+
    "\7\0\4\110\1\0\1\110\1\0\15\110\2\0\1\110"+
    "\2\0\1\306\1\0\5\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\306\1\110\2\306"+
    "\5\110\40\0\1\306\25\0\11\306\1\0\2\306\41\0"+
    "\1\232\3\0\2\232\24\0\11\232\1\0\2\232\14\0"+
    "\3\110\1\130\1\0\1\110\1\0\2\131\1\307\4\131"+
    "\1\110\2\131\3\110\2\0\1\131\4\0\1\147\4\110"+
    "\1\0\3\147\1\0\1\111\2\110\1\135\2\0\2\110"+
    "\1\0\1\110\11\0\1\147\2\0\5\147\16\0\7\310"+
    "\1\0\2\310\5\0\1\310\2\0\1\306\1\0\1\310"+
    "\5\0\3\310\13\0\11\306\1\310\2\306\5\310\4\0"+
    "\1\221\2\0\1\311\1\210\1\110\1\115\1\0\1\110"+
    "\1\116\12\110\1\210\1\110\1\210\2\0\1\110\1\0"+
    "\1\116\2\0\1\110\3\210\1\110\1\0\3\110\1\0"+
    "\1\111\1\117\1\110\1\120\2\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\4\0\1\221\2\0\1\311"+
    "\1\235\1\110\1\115\1\0\1\110\1\116\12\110\1\235"+
    "\1\110\1\210\2\0\1\110\1\0\1\116\2\0\1\110"+
    "\1\210\1\235\1\210\1\110\1\0\3\110\1\0\1\111"+
    "\1\117\1\110\1\120\2\0\2\110\1\0\1\110\11\0"+
    "\1\110\2\0\5\110\7\0\1\110\1\271\2\110\1\0"+
    "\1\110\1\0\12\110\1\235\1\110\1\235\2\0\1\110"+
    "\4\0\1\110\1\235\1\236\1\235\1\110\1\0\3\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\2\0\5\110\6\0\1\112\1\113\1\312\1\110"+
    "\1\115\1\0\1\110\1\116\12\110\1\312\1\110\1\312"+
    "\2\0\1\110\1\0\1\116\2\0\1\110\3\312\1\110"+
    "\1\0\3\110\1\0\1\111\1\117\1\110\1\120\2\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\7\0"+
    "\1\110\1\273\2\216\1\217\1\110\1\0\12\110\1\244"+
    "\1\110\1\244\2\0\1\110\4\0\1\110\1\244\1\313"+
    "\1\244\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\10\0"+
    "\1\275\17\0\1\246\1\0\1\246\10\0\1\246\1\314"+
    "\1\246\50\0\1\110\1\277\2\110\1\0\1\110\1\0"+
    "\12\110\1\250\1\110\1\250\2\0\1\110\4\0\1\110"+
    "\1\250\1\251\1\250\1\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\6\0\1\301\1\302\1\215\1\110\1\311\1\315"+
    "\1\110\1\0\12\110\1\215\1\110\1\215\2\0\1\110"+
    "\4\0\1\110\3\215\1\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\6\0\1\301\1\302\1\244\1\110\1\311\1\315"+
    "\1\110\1\0\12\110\1\244\1\110\1\215\2\0\1\110"+
    "\4\0\1\110\1\215\1\244\1\215\1\110\1\0\3\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\2\0\5\110\12\0\2\315\103\0\1\246\1\0"+
    "\2\315\14\0\1\246\13\0\1\246\51\0\4\110\1\0"+
    "\1\110\1\0\15\110\2\0\1\110\4\0\4\110\1\311"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\7\0\1\110\1\250"+
    "\2\110\1\0\1\110\1\0\12\110\1\250\2\110\2\0"+
    "\1\110\4\0\2\110\1\250\1\110\1\311\1\0\3\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\2\0\5\110\7\0\1\254\3\110\1\0\1\110"+
    "\1\0\15\110\2\0\1\110\4\0\5\110\1\0\3\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\2\0\5\110\7\0\3\110\1\130\1\0\1\110"+
    "\1\0\7\147\1\110\2\147\3\110\2\0\1\147\4\0"+
    "\1\150\4\110\1\0\3\150\1\0\1\111\2\110\1\135"+
    "\2\0\2\110\1\0\1\110\11\0\1\150\2\0\1\262"+
    "\4\150\6\0\1\126\1\155\1\255\2\110\1\0\1\110"+
    "\1\0\12\110\1\255\1\110\1\255\2\0\1\110\4\0"+
    "\1\110\3\255\1\110\1\0\3\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\67\0\1\260\1\0\1\260\24\0\1\256\200\0\1\260"+
    "\14\0\1\254\2\110\1\130\1\0\1\110\1\0\7\147"+
    "\1\110\2\147\3\110\2\0\1\147\4\0\1\150\4\110"+
    "\1\0\3\150\1\0\1\111\2\110\1\135\2\0\2\110"+
    "\1\0\1\110\11\0\1\150\2\0\5\150\10\0\1\316"+
    "\17\0\1\316\1\0\1\316\10\0\3\316\51\0\1\317"+
    "\17\0\1\317\1\0\1\317\10\0\3\317\51\0\1\320"+
    "\17\0\1\320\1\0\1\320\10\0\3\320\50\0\2\206"+
    "\1\0\1\206\3\0\7\321\1\206\2\321\1\206\1\0"+
    "\1\206\2\0\1\321\4\0\1\321\3\206\2\0\3\321"+
    "\24\0\1\321\2\0\5\321\4\0\1\221\2\0\1\110"+
    "\1\235\1\110\1\115\1\0\1\110\1\116\12\110\1\235"+
    "\1\110\1\235\2\0\1\110\1\0\1\116\2\0\1\110"+
    "\3\235\1\110\1\0\3\110\1\0\1\111\1\117\1\110"+
    "\1\120\2\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\4\0\1\221\2\0\1\110\1\235\1\110\1\115"+
    "\1\0\1\110\1\116\12\110\1\235\1\110\1\210\2\0"+
    "\1\110\1\0\1\116\2\0\1\110\1\210\1\235\1\210"+
    "\1\110\1\0\3\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\6\0\1\301\1\302\1\322\2\110\1\0\1\110\1\0"+
    "\12\110\1\322\1\110\1\322\2\0\1\110\4\0\1\110"+
    "\3\322\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\6\0"+
    "\1\301\1\302\1\322\2\110\1\0\1\110\1\0\12\110"+
    "\1\322\1\110\1\215\2\0\1\110\4\0\1\110\1\215"+
    "\1\322\1\215\1\110\1\0\3\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\10\0\1\323\17\0\1\323\1\0\1\323\10\0\3\323"+
    "\51\0\1\323\17\0\1\323\13\0\1\323\51\0\1\110"+
    "\1\250\2\110\1\0\1\110\1\0\12\110\1\250\1\110"+
    "\1\250\2\0\1\110\4\0\1\110\3\250\1\110\1\0"+
    "\3\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\7\0\1\110\1\250\2\110"+
    "\1\0\1\110\1\0\12\110\1\250\2\110\2\0\1\110"+
    "\4\0\2\110\1\250\2\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\10\0\1\324\17\0\1\324\1\0\1\324\10\0"+
    "\3\324\50\0\1\110\1\325\2\110\1\0\1\110\1\0"+
    "\12\110\1\325\1\110\1\325\2\0\1\110\4\0\1\110"+
    "\3\325\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\4\0"+
    "\1\221\3\0\1\303\1\0\1\120\2\0\1\116\12\0"+
    "\1\303\1\0\1\303\4\0\1\116\3\0\3\303\7\0"+
    "\1\116\1\0\1\120\33\0\1\221\2\0\1\110\1\304"+
    "\1\110\1\115\1\0\1\110\1\116\12\110\1\304\1\110"+
    "\1\304\2\0\1\110\1\0\1\116\2\0\1\110\3\304"+
    "\1\110\1\0\3\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\7\0\4\110\1\0\1\110\1\0\7\305\1\110\2\305"+
    "\3\110\2\0\1\305\4\0\1\305\4\110\1\0\3\305"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\305\2\0\5\305\7\0\3\110\1\130\1\0\1\110"+
    "\1\0\3\131\1\326\3\131\1\110\2\131\3\110\2\0"+
    "\1\131\4\0\1\147\4\110\1\0\3\147\1\0\1\111"+
    "\2\110\1\135\2\0\2\110\1\0\1\110\11\0\1\147"+
    "\2\0\5\147\16\0\7\310\1\0\2\310\5\0\1\310"+
    "\4\0\1\310\5\0\3\310\24\0\1\310\2\0\5\310"+
    "\7\0\4\110\1\0\1\110\1\0\12\110\1\327\1\110"+
    "\1\327\2\0\1\110\4\0\1\110\3\327\1\110\1\0"+
    "\3\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\6\0\1\112\1\330\1\121"+
    "\1\110\1\331\1\332\1\110\1\116\12\110\1\121\1\110"+
    "\1\121\2\0\1\110\1\0\1\116\2\0\1\110\3\121"+
    "\1\333\1\0\3\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\6\0\1\301\1\302\1\334\1\110\1\311\1\315\1\110"+
    "\1\0\12\110\1\334\1\110\1\215\2\0\1\110\4\0"+
    "\1\110\1\215\1\334\1\215\1\110\1\0\3\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\2\0\5\110\10\0\1\335\1\0\2\315\14\0\1\335"+
    "\13\0\1\335\72\0\1\336\1\0\1\336\10\0\3\336"+
    "\47\0\1\301\1\302\1\215\1\110\1\337\1\340\1\110"+
    "\1\0\12\110\1\215\1\110\1\215\2\0\1\110\4\0"+
    "\1\110\3\215\1\110\1\0\3\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\12\0\2\340\102\0\3\110\1\130\1\0\1\110\1\0"+
    "\4\131\1\341\2\131\1\110\2\131\3\110\2\0\1\131"+
    "\4\0\1\147\4\110\1\0\3\147\1\0\1\111\2\110"+
    "\1\135\2\0\2\110\1\0\1\110\11\0\1\147\2\0"+
    "\5\147\7\0\1\110\1\342\2\110\1\0\1\110\1\0"+
    "\12\110\1\342\1\110\1\342\2\0\1\110\4\0\1\110"+
    "\3\342\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\4\0"+
    "\1\343\2\0\1\110\1\210\2\110\1\0\1\110\1\0"+
    "\12\110\1\210\1\110\1\210\2\0\1\110\4\0\1\110"+
    "\3\210\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\7\0"+
    "\1\110\1\344\2\216\1\217\1\110\1\0\12\110\1\345"+
    "\1\110\1\345\2\0\1\110\4\0\1\110\1\345\1\346"+
    "\1\345\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\10\0"+
    "\1\347\17\0\1\350\1\0\1\350\10\0\1\350\1\351"+
    "\1\350\50\0\1\110\1\352\2\110\1\0\1\110\1\0"+
    "\12\110\1\353\1\110\1\353\2\0\1\110\4\0\1\110"+
    "\1\353\1\354\1\353\1\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\6\0\1\301\1\302\1\215\1\110\1\355\1\356"+
    "\1\110\1\0\12\110\1\215\1\110\1\215\2\0\1\110"+
    "\4\0\1\110\3\215\1\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\12\0\2\356\103\0\1\357\17\0\1\357\1\0"+
    "\1\357\10\0\3\357\50\0\4\110\1\0\1\110\1\0"+
    "\12\110\1\360\1\110\1\360\2\0\1\110\4\0\1\110"+
    "\3\360\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\30\0"+
    "\1\361\1\0\1\361\10\0\3\361\50\0\3\110\1\130"+
    "\1\0\1\110\1\0\5\131\1\362\1\131\1\110\2\131"+
    "\3\110\2\0\1\131\4\0\1\147\4\110\1\0\3\147"+
    "\1\0\1\111\2\110\1\135\2\0\2\110\1\0\1\110"+
    "\11\0\1\147\2\0\5\147\7\0\1\110\1\363\2\110"+
    "\1\0\1\110\1\0\12\110\1\363\1\110\1\363\2\0"+
    "\1\110\4\0\1\110\3\363\1\110\1\0\3\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\2\0\5\110\10\0\1\364\33\0\1\365\50\0\1\301"+
    "\1\302\1\366\2\110\1\0\1\110\1\0\12\110\1\366"+
    "\1\110\1\366\2\0\1\110\4\0\1\110\3\366\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\6\0\1\301\1\302"+
    "\1\215\1\110\1\367\1\370\1\110\1\0\12\110\1\215"+
    "\1\110\1\215\2\0\1\110\4\0\1\110\3\215\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\6\0\1\301\1\302"+
    "\1\371\1\110\1\367\1\370\1\110\1\0\12\110\1\371"+
    "\1\110\1\215\2\0\1\110\4\0\1\110\1\215\1\371"+
    "\1\215\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\10\0"+
    "\1\372\17\0\1\372\1\0\1\372\10\0\3\372\53\0"+
    "\2\370\103\0\1\373\1\0\2\370\14\0\1\373\13\0"+
    "\1\373\51\0\1\110\1\374\2\110\1\0\1\110\1\0"+
    "\12\110\1\374\1\110\1\374\2\0\1\110\4\0\1\110"+
    "\3\374\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\7\0"+
    "\4\110\1\0\1\110\1\0\15\110\2\0\1\110\4\0"+
    "\4\110\1\367\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\7\0"+
    "\1\110\1\375\2\110\1\0\1\110\1\0\12\110\1\375"+
    "\2\110\2\0\1\110\4\0\2\110\1\375\1\110\1\367"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\7\0\4\110\1\0"+
    "\1\110\1\0\12\110\1\376\1\110\1\376\2\0\1\110"+
    "\4\0\1\110\3\376\1\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\30\0\1\377\1\0\1\377\10\0\3\377\51\0"+
    "\1\u0100\17\0\1\u0100\1\0\1\u0100\10\0\3\u0100\50\0"+
    "\1\110\1\u0101\2\110\1\0\1\110\1\0\12\110\1\u0101"+
    "\1\110\1\u0101\2\0\1\110\4\0\1\110\3\u0101\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\10\0\1\u0102\17\0"+
    "\1\u0102\1\0\1\u0102\10\0\3\u0102\50\0\3\110\1\130"+
    "\1\0\1\110\1\0\6\131\1\u0103\1\110\2\131\3\110"+
    "\2\0\1\131\4\0\1\147\4\110\1\0\3\147\1\0"+
    "\1\111\2\110\1\135\2\0\2\110\1\0\1\110\11\0"+
    "\1\147\2\0\5\147\7\0\1\110\1\u0104\2\110\1\0"+
    "\1\110\1\0\12\110\1\u0104\1\110\1\u0104\2\0\1\110"+
    "\4\0\1\110\3\u0104\1\110\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\10\0\1\u0105\17\0\1\u0105\1\0\1\u0105\10\0"+
    "\3\u0105\51\0\1\u0105\17\0\1\u0105\13\0\1\u0105\50\0"+
    "\1\301\1\302\1\215\1\110\1\u0106\1\u0107\1\110\1\0"+
    "\12\110\1\215\1\110\1\215\2\0\1\110\4\0\1\110"+
    "\3\215\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\7\0"+
    "\4\110\1\0\1\110\1\0\12\110\1\u0108\1\110\1\u0109"+
    "\2\0\1\110\4\0\1\110\1\u0109\1\u0108\1\u010a\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\30\0\1\u010b\1\0"+
    "\1\u010c\10\0\1\u010c\1\u010b\1\u010d\47\0\1\301\1\302"+
    "\1\215\1\110\1\u010e\1\u010f\1\110\1\0\12\110\1\215"+
    "\1\110\1\215\2\0\1\110\4\0\1\110\3\215\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\12\0\2\u0107\105\0"+
    "\2\u010f\102\0\4\110\1\0\1\110\1\0\15\110\2\0"+
    "\1\110\4\0\4\110\1\u0106\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\7\0\4\110\1\0\1\110\1\0\15\110\2\0"+
    "\1\110\4\0\4\110\1\u010e\1\0\3\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\2\0"+
    "\5\110\7\0\1\110\1\u0110\2\110\1\0\1\110\1\0"+
    "\12\110\1\u0110\1\110\1\u0110\2\0\1\110\4\0\1\110"+
    "\3\u0110\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\10\0"+
    "\1\u0111\17\0\1\u0111\1\0\1\u0111\10\0\3\u0111\51\0"+
    "\1\u0112\17\0\1\u0112\1\0\1\u0112\10\0\3\u0112\50\0"+
    "\1\110\1\u0113\2\110\1\0\1\110\1\0\12\110\1\u0113"+
    "\1\110\1\u0113\2\0\1\110\4\0\1\110\3\u0113\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\10\0\1\u0114\17\0"+
    "\1\u0114\1\0\1\u0114\10\0\3\u0114\50\0\3\110\1\130"+
    "\1\0\1\110\1\0\7\131\1\u0115\2\131\3\110\2\0"+
    "\1\131\4\0\1\147\4\110\1\0\3\147\1\0\1\111"+
    "\2\110\1\135\2\0\2\110\1\0\1\110\11\0\1\147"+
    "\2\0\5\147\7\0\1\u0116\106\0\1\110\1\u0117\2\110"+
    "\1\0\1\110\1\0\12\110\1\u0117\2\110\2\0\1\110"+
    "\4\0\2\110\1\u0117\1\u0118\1\110\1\0\3\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\2\0\5\110\10\0\1\u0119\17\0\1\u0119\13\0\1\u0119"+
    "\1\u011a\50\0\1\110\1\u0109\2\110\1\0\1\110\1\0"+
    "\12\110\1\u0109\1\110\1\u0109\2\0\1\110\4\0\1\110"+
    "\3\u0109\1\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\7\0"+
    "\1\110\1\u0109\2\110\1\0\1\110\1\0\15\110\2\0"+
    "\1\110\4\0\2\110\1\u0109\2\110\1\0\3\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\2\0\5\110\10\0\1\u010c\17\0\1\u010c\1\0\1\u010c"+
    "\10\0\3\u010c\51\0\1\u010c\33\0\1\u010c\51\0\1\110"+
    "\1\u0117\2\110\1\0\1\110\1\0\12\110\1\u0108\1\110"+
    "\1\u0109\2\0\1\110\4\0\1\110\1\u0109\1\u0108\1\u010a"+
    "\1\110\1\0\3\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\2\0\5\110\10\0\1\u0119"+
    "\17\0\1\u010b\1\0\1\u010c\10\0\1\u010c\1\u010b\1\u010d"+
    "\50\0\1\110\1\u011b\2\110\1\0\1\110\1\0\12\110"+
    "\1\u011b\1\110\1\u011b\2\0\1\110\4\0\1\110\3\u011b"+
    "\1\110\1\0\3\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\2\0\5\110\10\0\1\u011c"+
    "\17\0\1\u011c\1\0\1\u011c\10\0\3\u011c\50\0\1\110"+
    "\1\u011d\2\110\1\0\1\110\1\0\12\110\1\u011d\1\110"+
    "\1\u011d\2\0\1\110\4\0\1\110\3\u011d\1\110\1\0"+
    "\3\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\10\0\1\u011e\17\0\1\u011e"+
    "\1\0\1\u011e\10\0\3\u011e\50\0\4\110\1\0\1\110"+
    "\1\0\10\110\1\u011f\4\110\2\0\1\110\4\0\5\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\4\0\1\u0107\111\0"+
    "\1\110\1\u0120\2\110\1\0\1\110\1\0\12\110\1\u0120"+
    "\1\110\1\u0120\2\0\1\110\4\0\1\110\3\u0120\1\110"+
    "\1\0\3\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\2\0\5\110\10\0\1\u0121\17\0"+
    "\1\u0121\1\0\1\u0121\10\0\3\u0121\50\0\4\110\1\0"+
    "\1\110\1\0\15\110\2\0\1\110\4\0\5\110\1\u0112"+
    "\3\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\2\0\5\110\47\0\1\u0112\46\0\4\110"+
    "\1\0\1\110\1\0\11\110\1\u0122\3\110\2\0\1\110"+
    "\4\0\5\110\1\0\3\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\2\0\5\110\7\0"+
    "\4\110\1\0\1\110\1\0\7\110\1\u0123\5\110\2\0"+
    "\1\110\4\0\5\110\1\0\3\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\2\0\5\110"+
    "\7\0\4\110\1\0\1\110\1\0\12\110\1\u0124\1\110"+
    "\1\u0124\2\0\1\110\4\0\5\110\1\0\3\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\2\0\5\110\7\0\4\110\1\0\1\110\1\0\13\110"+
    "\1\117\1\110\2\0\1\110\4\0\5\110\1\0\3\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\2\0\5\110";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17324];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\7\11\31\1\1\11\1\1\1\11\16\1\1\11"+
    "\16\1\4\0\1\1\1\0\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\3\0\4\1\2\0\1\1\3\0\6\1"+
    "\1\0\1\1\1\0\1\1\3\0\1\1\3\0\1\1"+
    "\2\0\11\1\1\11\1\1\1\0\1\11\1\1\2\0"+
    "\2\1\4\0\1\1\2\0\1\1\5\0\2\1\2\0"+
    "\5\1\1\0\1\1\3\0\2\1\5\0\3\1\1\11"+
    "\3\0\3\1\4\0\4\1\6\0\6\1\1\0\2\1"+
    "\2\0\1\1\2\11\2\1\1\0\3\1\5\0\1\1"+
    "\4\0\1\1\2\0\3\1\13\0\1\1\3\0\1\1"+
    "\2\0\1\1\11\0\2\1\3\0\4\1\1\11\1\1"+
    "\4\0\1\11\15\0\2\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	JCas UIMA_JCas;

	Range currentRange;
	Currensy currentCurrensy;
	ComplexWord currentComplexWord;	
	Date currentDate;		
	
	boolean inRange;
	boolean currensyEnd;
	boolean inComplex;
	boolean inDate;

	int beginPosition;
	

	public JFlex_Tokenizer(java.io.Reader in, JCas UIMA_JCas) {
		this.UIMA_JCas = UIMA_JCas;
    	this.zzReader = in;
    	allBooleansToFalse();
    }
    
    public void allBooleansToFalse() {
    	this.inRange = false; 
    	this.currensyEnd = false; 
    	this.inComplex = false;
    	this.inDate = false; 		
    }
	public boolean isEof() {
		return zzAtEOF;
	}

	private void back() {
		yypushback(yylength());
	}	  
	
	public Letters getLettersToken(String language, String letterCase) {
		Letters token = new Letters(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setLanguage(language);
		token.setLetterCase(letterCase);
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Number getNumberToken(String kind, String sign) {
		Number token = new Number(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setKind(kind);
		token.setSign(sign);
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Separator getSeparatorToken(String kind) {
		Separator token = new Separator(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setKind(kind);		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public PM getPmToken() {
		PM token = new PM(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Bracket getBracketToken() {
		Bracket token = new Bracket(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Symbol getSymbolToken() {
		Symbol token = new Symbol(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Abbrevation getAbbrevationToken(String lang) {
		Abbrevation token = new Abbrevation(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLanguage(lang);
		return token;
	}

	public Range getRangeToken(String left, String right) {
		Range token = new Range(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLeft(left);
		token.setRight(right);
		return token;
	}	

	public Currensy getCurrensyToken(String value, String kindOfCurrensy) {
		Currensy token = new Currensy(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setValue(value);
		token.setCurrensySymbol(kindOfCurrensy);
		return token;
	}

/*	public Measurement getMeasurementToken(Number value, String unitName) {
		Measurement token = new Measurement(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());

	}*/

	public ComplexWord getComplexWordToken(String left, String right) {
		ComplexWord token = new ComplexWord(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLeft(left);
		token.setRight(right);
		return token;
	}

	public Date getDateToken(String year, String mounth, String day) {
		Date token = new Date(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setYear(year);
		token.setMounth(mounth);
		token.setDay(day);
		return token;
	}

	public Email getEmailToken() {
		Email token = new Email(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlex_Tokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JFlex_Tokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 264) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return getEmailToken();
          }
        case 50: break;
        case 18: 
          { Symbol currensySymbol = getSymbolToken();
			currentCurrensy.setCurrensySymbol(currensySymbol.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);				
				currensyEnd = true;
			}
			return currensySymbol;
          }
        case 51: break;
        case 34: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Mixed");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Mixed");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 52: break;
        case 7: 
          { yybegin(YYINITIAL); return getPmToken();
          }
        case 53: break;
        case 37: 
          { currentRange = getRangeToken(null, null);
			yybegin(IN_RANGE);
			back();
			return currentRange;
          }
        case 54: break;
        case 29: 
          { yybegin(YYINITIAL); return getLettersToken("English","Capital");
          }
        case 55: break;
        case 25: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setMounth(number.getText());
			inDate = false;
		}
		else {
			currentDate.setDay(number.getText());			
			inDate = true;
		}
		yybegin(IN_DATE_DMY);
		return number;
          }
        case 56: break;
        case 8: 
          { yybegin(YYINITIAL); return getNumberToken("Integer","Positive");
          }
        case 57: break;
        case 19: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Upper");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Upper");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 58: break;
        case 5: 
          { yybegin(YYINITIAL); return getSeparatorToken("Space");
          }
        case 59: break;
        case 14: 
          { yybegin(YYINITIAL); return getLettersToken("Russian","Mixed");
          }
        case 60: break;
        case 36: 
          { yybegin(YYINITIAL); return getNumberToken("Real","Positive");
          }
        case 61: break;
        case 46: 
          { Number number = getNumberToken("Integer","Positive");
		currentDate.setYear(number.getText());
		yybegin(YYINITIAL);
		return number;
          }
        case 62: break;
        case 26: 
          { currentCurrensy = getCurrensyToken(null, null);
			yybegin(IN_CURRENSY);
			back();			
			return currentCurrensy;
          }
        case 63: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 64: break;
        case 21: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Lower");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Lower");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 65: break;
        case 39: 
          { yybegin(YYINITIAL); return getAbbrevationToken("English");
          }
        case 66: break;
        case 40: 
          { yybegin(YYINITIAL); return getAbbrevationToken("Russian");
          }
        case 67: break;
        case 27: 
          { yybegin(YYINITIAL); return getNumberToken("Integer","Negative");
          }
        case 68: break;
        case 13: 
          { yybegin(YYINITIAL); return getLettersToken("Russian","Lower");
          }
        case 69: break;
        case 32: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Capital");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Capital");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 70: break;
        case 12: 
          { yybegin(YYINITIAL); return getLettersToken("Russian","Upper");
          }
        case 71: break;
        case 17: 
          { Number numberValue = getNumberToken("Integer","Positive");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);			
				currensyEnd = true;
			}
			return numberValue;
          }
        case 72: break;
        case 11: 
          { yybegin(YYINITIAL); return getBracketToken();
          }
        case 73: break;
        case 2: 
          { yybegin(YYINITIAL); return getSeparatorToken("New line");
          }
        case 74: break;
        case 43: 
          { yybegin(YYINITIAL); return getNumberToken("Real","Negative");
          }
        case 75: break;
        case 9: 
          { yybegin(YYINITIAL); return getSymbolToken();
          }
        case 76: break;
        case 42: 
          { Number numberValue = getNumberToken("Real","Positive");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);				
				currensyEnd = true;
			}
			return numberValue;
          }
        case 77: break;
        case 30: 
          { yybegin(YYINITIAL); return getLettersToken("English","Mixed");
          }
        case 78: break;
        case 49: 
          { currentDate = getDateToken(null,null,null);
			yybegin(IN_DATE_YMD);
			back();
			return currentDate;
          }
        case 79: break;
        case 48: 
          { currentDate = getDateToken(null,null,null);
			yybegin(IN_DATE_DMY);
			back();
			return currentDate;
          }
        case 80: break;
        case 23: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Lower");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Lower");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 81: break;
        case 24: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setDay(number.getText());
			yybegin(YYINITIAL);
			inDate = false;
		}
		else {
			currentDate.setMounth(number.getText());
			yybegin(IN_DATE_YMD);
			inDate = true;
		}
		return number;
          }
        case 82: break;
        case 3: 
          { yybegin(YYINITIAL); return getSeparatorToken("Carrige return");
          }
        case 83: break;
        case 35: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setMounth(number.getText());			
			inDate = false;
		}
		else {
			currentDate.setDay(number.getText());			
			inDate = true;
		}
		yybegin(IN_DATE_DMY);
		return number;
          }
        case 84: break;
        case 6: 
          { yybegin(YYINITIAL); return getSeparatorToken("Form feed");
          }
        case 85: break;
        case 38: 
          { currentComplexWord = getComplexWordToken(null,null);
			yybegin(IN_COMPLEX);
			back();
			return currentComplexWord;
          }
        case 86: break;
        case 41: 
          { if (inRange == true) {
				yybegin(YYINITIAL); 
				Number numberRight = getNumberToken("Real","Positive");
				currentRange.setRight(numberRight.getText());
				inRange = false;
				return numberRight;
			}
			else {
				yybegin(IN_RANGE);
				Number numberLeft = getNumberToken("Real","Positive");
				currentRange.setLeft(numberLeft.getText());
				inRange = true;
				return numberLeft;
			}
          }
        case 87: break;
        case 33: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Capital");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Capital");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 88: break;
        case 44: 
          { Number numberValue = getNumberToken("Real","Negative");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);
				currensyEnd = true;
			}
			return numberValue;
          }
        case 89: break;
        case 22: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Mixed");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Mixed");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 90: break;
        case 15: 
          { yybegin(YYINITIAL); return getLettersToken("English","Lower");
          }
        case 91: break;
        case 16: 
          { if (inRange == true) {
				yybegin(YYINITIAL); 
				Number numberRight = getNumberToken("Integer","Positive");
				currentRange.setRight(numberRight.getText());
				inRange = false;
				return numberRight;
			}
			else {
				yybegin(IN_RANGE);
				Number numberLeft = getNumberToken("Integer","Positive");
				currentRange.setLeft(numberLeft.getText());
				inRange = true;
				return numberLeft;
			}
          }
        case 92: break;
        case 28: 
          { yybegin(YYINITIAL); return getLettersToken("Russian","Capital");
          }
        case 93: break;
        case 20: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Upper");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Upper");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 94: break;
        case 10: 
          { yybegin(YYINITIAL); return getLettersToken("English","Upper");
          }
        case 95: break;
        case 4: 
          { yybegin(YYINITIAL); return getSeparatorToken("Tabulation");
          }
        case 96: break;
        case 31: 
          { Number numberValue = getNumberToken("Integer","Negative");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);			
				currensyEnd = true;
			}
			return numberValue;
          }
        case 97: break;
        case 45: 
          { Number number = getNumberToken("Integer","Positive");
		currentDate.setYear(number.getText());
		return number;
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java JFlex_Tokenizer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        JFlex_Tokenizer scanner = null;
        try {
          scanner = new JFlex_Tokenizer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
