/* The following code was generated by JFlex 1.4.3 on 26.03.13 18:32 */

// Sidikov Marsel

package ru.kfu.cll.uima.tokenizer;
import ru.kfu.cll.uima.tokenizer.types.Token;
import ru.kfu.cll.uima.tokenizer.types.Letters;
import ru.kfu.cll.uima.tokenizer.types.Number;
import ru.kfu.cll.uima.tokenizer.types.Separator;
import ru.kfu.cll.uima.tokenizer.types.PM;
import ru.kfu.cll.uima.tokenizer.types.Bracket;
import ru.kfu.cll.uima.tokenizer.types.Symbol;
import ru.kfu.cll.uima.tokenizer.types.Range;
import ru.kfu.cll.uima.tokenizer.types.Abbrevation;
import ru.kfu.cll.uima.tokenizer.types.Currensy;
import ru.kfu.cll.uima.tokenizer.types.Measurement;
import ru.kfu.cll.uima.tokenizer.types.ComplexWord;
import ru.kfu.cll.uima.tokenizer.types.Date;
import ru.kfu.cll.uima.tokenizer.types.Email;
import ru.kfu.cll.uima.tokenizer.types.Abbrevation;
import ru.kfu.cll.uima.tokenizer.types.RussianWord;
import org.apache.uima.jcas.JCas;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26.03.13 18:32 from the specification file
 * <tt>data/jflex/JFlex_Tokenizer.flex</tt>
 */
public class JFlex_Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_DATE_YMD = 10;
  public static final int IN_RANGE = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_COMPLEX = 8;
  public static final int IN_PERCENTS = 14;
  public static final int IN_CURRENSY = 4;
  public static final int IN_DATE_DMY = 12;
  public static final int IN_MEAS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\5\1\2\22\0\1\4\1\65\1\66"+
    "\1\14\1\57\1\14\1\14\1\0\2\62\1\14\1\11\1\6\1\12"+
    "\1\7\1\46\1\10\1\44\1\30\1\45\1\32\1\43\1\43\3\43"+
    "\1\55\1\55\1\66\1\14\1\66\1\65\1\56\1\53\1\35\1\16"+
    "\1\35\1\21\1\35\2\35\1\26\3\35\1\54\1\22\1\35\1\27"+
    "\1\35\1\20\1\23\1\35\1\17\3\35\1\24\1\35\1\63\1\36"+
    "\1\47\1\67\1\25\1\36\1\50\1\42\1\110\1\42\1\106\7\42"+
    "\1\51\1\104\1\105\1\52\3\42\1\107\4\42\1\101\1\42\1\64"+
    "\1\60\1\31\1\60\44\36\1\37\1\36\1\37\5\36\1\33\4\36"+
    "\1\33\12\36\1\33\u0345\36\1\41\16\36\21\34\1\34\16\34\1\40"+
    "\1\100\1\40\1\77\1\71\1\40\1\70\1\40\1\102\3\40\1\76"+
    "\1\40\1\103\1\73\1\74\1\75\1\72\15\40\1\0\1\40\u1bc2\0"+
    "\1\61\21\0\1\55\174\0\1\15\10\0\1\15\151\0\1\66\373\0"+
    "\1\13\udded\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\7\1\1\2\11\3\1\1\10\1\12"+
    "\1\10\1\11\1\13\1\1\1\11\1\10\1\1\1\12"+
    "\2\1\2\11\1\12\1\11\7\13\1\1\1\14\1\1"+
    "\1\15\2\1\1\16\1\17\1\1\1\20\1\21\1\22"+
    "\1\23\1\1\3\24\1\1\3\25\4\0\1\10\1\0"+
    "\2\26\1\0\1\10\2\27\1\0\1\26\3\0\1\13"+
    "\1\30\1\0\1\10\3\0\1\10\3\0\1\26\3\0"+
    "\1\13\6\0\1\31\1\17\1\32\1\33\1\20\1\32"+
    "\1\22\1\34\1\23\2\24\1\0\1\35\1\25\2\0"+
    "\2\36\4\0\1\37\2\0\1\37\5\0\1\26\1\0"+
    "\2\36\1\0\1\10\3\0\2\37\6\0\1\26\1\40"+
    "\3\0\1\41\1\42\4\0\2\36\2\37\6\0\2\43"+
    "\2\0\1\10\1\37\2\0\1\44\1\45\1\46\1\47"+
    "\1\37\1\0\2\37\6\0\1\37\7\0\3\37\17\0"+
    "\1\37\2\0\1\37\12\0\1\50\3\0\6\51\4\0"+
    "\1\50\15\0\2\50\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u01ff\0\u01ff\0\u01ff\0\u01ff\0\u01ff\0\u01ff\0\u0248\0\u0291"+
    "\0\u02da\0\u0323\0\u036c\0\u0248\0\u03b5\0\u03fe\0\u0447\0\u0490"+
    "\0\u04d9\0\u0447\0\u0522\0\u056b\0\u05b4\0\u056b\0\u05fd\0\u0646"+
    "\0\u0248\0\u056b\0\u068f\0\u06d8\0\u01ff\0\u0721\0\u01ff\0\u0447"+
    "\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969"+
    "\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u01ff\0\u0b1f\0\u0b68"+
    "\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0"+
    "\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0248\0\u0f1d\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u1041\0\u01ff\0\u0248\0\u108a\0\u10d3\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u11f7\0\u1240\0\u1289\0\u056b\0\u0248\0\u12d2"+
    "\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a"+
    "\0\u1563\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719"+
    "\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u0b68\0\u18cf\0\u1918"+
    "\0\u0c43\0\u1961\0\u19aa\0\u19f3\0\u01ff\0\u1a3c\0\u1a3c\0\u01ff"+
    "\0\u1a85\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83"+
    "\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082\0\u20cb"+
    "\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313"+
    "\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u01ff\0\u2480\0\u24c9\0\u2512"+
    "\0\u17ab\0\u17f4\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8"+
    "\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u255b\0\u01ff\0\u01ff\0\u2636\0\u2ba1\0\u2bea\0\u28c7\0\u2910"+
    "\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u2e32"+
    "\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a"+
    "\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2"+
    "\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a"+
    "\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752"+
    "\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908\0\u0248\0\u3951"+
    "\0\u399a\0\u39e3\0\u3a2c\0\u0248\0\u3a75\0\u3abe\0\u01ff\0\u3b07"+
    "\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u01ff\0\u3c74\0\u3cbd\0\u3d06"+
    "\0\u3d4f\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u3d98\0\u3de1\0\u3e2a"+
    "\0\u3e73\0\u3ebc\0\u3e2a\0\u3e73\0\u3f05\0\u3f4e\0\u3f97";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\10\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\27\1\36"+
    "\1\37\2\35\1\27\1\33\1\31\1\40\1\41\1\42"+
    "\1\43\1\27\1\44\1\30\1\27\1\16\1\45\1\46"+
    "\1\27\1\16\1\47\1\42\1\32\1\17\1\45\1\50"+
    "\1\51\1\52\1\53\1\52\1\35\1\54\1\35\1\55"+
    "\1\56\1\27\1\57\1\35\2\27\1\60\2\27\10\10"+
    "\1\61\1\62\16\10\1\61\1\10\1\61\10\10\3\61"+
    "\53\10\1\63\1\64\2\65\1\10\1\66\12\10\1\63"+
    "\1\10\1\63\4\10\1\66\3\10\3\63\11\10\1\66"+
    "\160\10\7\67\1\70\2\67\1\10\1\70\1\10\1\70"+
    "\1\71\1\67\2\70\1\72\1\73\1\74\4\10\1\70"+
    "\3\74\2\67\3\10\1\70\2\10\2\70\2\10\1\70"+
    "\11\72\1\74\2\72\5\74\10\10\1\75\17\10\1\76"+
    "\1\10\1\77\10\10\1\77\1\76\1\100\53\10\1\101"+
    "\17\10\1\102\1\10\1\103\10\10\1\103\1\102\1\104"+
    "\43\10\120\0\4\105\1\0\1\105\1\0\15\105\2\0"+
    "\1\105\4\0\5\105\1\0\5\105\1\0\1\106\2\105"+
    "\3\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\6\0\1\107\1\110\1\111\1\105\1\112\1\0\1\105"+
    "\1\113\12\105\1\111\1\105\1\111\2\0\1\105\1\0"+
    "\1\113\2\0\1\105\3\111\1\105\1\0\5\105\1\0"+
    "\1\106\1\114\1\105\1\115\2\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\7\0\1\105\1\116\2\105"+
    "\1\0\1\105\1\0\12\105\1\116\1\105\1\116\2\0"+
    "\1\105\4\0\1\105\3\116\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\7\0\1\105\1\117\2\105\1\0\1\105"+
    "\1\0\12\105\1\117\1\105\1\117\2\0\1\105\4\0"+
    "\1\105\3\117\1\105\1\0\5\105\1\0\1\106\2\105"+
    "\3\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\10\0\1\120\17\0\1\120\1\0\1\120\10\0\3\120"+
    "\47\0\1\121\3\0\1\122\1\123\2\124\14\0\1\122"+
    "\1\0\1\122\10\0\3\122\52\0\4\105\1\0\1\105"+
    "\1\0\1\105\1\125\13\105\2\0\1\105\2\0\1\126"+
    "\1\0\5\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\126\1\105\2\126\5\105\7\0"+
    "\4\105\1\0\1\105\1\0\15\105\2\0\1\105\2\0"+
    "\1\126\1\0\5\105\1\0\5\105\1\0\1\106\2\105"+
    "\3\0\2\105\1\0\1\105\11\126\1\105\2\126\5\105"+
    "\7\0\4\105\1\0\1\105\1\0\15\105\2\0\1\105"+
    "\2\0\1\126\1\0\5\105\1\0\4\105\1\127\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\126\1\105"+
    "\2\126\5\105\6\0\1\107\1\130\1\131\1\105\1\132"+
    "\1\133\1\105\1\113\12\105\1\131\1\105\1\131\2\0"+
    "\1\105\1\0\1\113\2\0\1\105\3\131\1\134\1\0"+
    "\5\105\1\0\1\106\1\114\1\105\1\115\2\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\6\0\1\107"+
    "\1\130\1\135\1\105\1\132\1\133\1\105\1\113\12\105"+
    "\1\135\1\105\1\135\2\0\1\105\1\0\1\113\2\0"+
    "\1\105\3\135\1\134\1\0\5\105\1\0\1\106\1\114"+
    "\1\105\1\115\2\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\40\0\1\126\27\0\11\126\1\0\2\126"+
    "\41\0\1\35\3\0\2\35\26\0\11\35\1\0\2\35"+
    "\11\0\1\121\3\0\1\122\1\123\2\124\14\0\1\122"+
    "\1\0\1\122\5\0\1\126\2\0\3\122\22\0\11\126"+
    "\1\0\2\126\13\0\1\107\1\130\1\131\1\105\1\132"+
    "\1\133\1\105\1\113\12\105\1\135\1\105\1\135\2\0"+
    "\1\105\1\0\1\113\2\0\1\105\1\135\1\131\1\135"+
    "\1\134\1\0\5\105\1\0\1\106\1\114\1\105\1\115"+
    "\2\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\7\0\1\136\3\105\1\0\1\105\1\0\15\105\2\0"+
    "\1\105\2\0\1\126\1\0\5\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\126\1\105"+
    "\2\126\1\137\4\105\7\0\1\140\3\105\1\0\1\105"+
    "\1\0\15\105\2\0\1\105\2\0\1\126\1\0\5\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\126\1\105\2\126\5\105\4\0\1\121\2\0"+
    "\1\105\1\141\1\142\1\143\1\124\1\105\1\0\12\105"+
    "\1\141\1\105\1\141\2\0\1\105\4\0\1\105\3\141"+
    "\1\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\34\0\1\35"+
    "\3\0\2\35\4\0\1\144\21\0\11\35\1\0\2\35"+
    "\41\0\1\35\3\0\2\35\26\0\4\35\1\145\4\35"+
    "\1\0\2\35\14\0\1\146\24\0\1\35\3\0\2\35"+
    "\26\0\11\35\1\0\2\35\41\0\1\35\3\0\2\35"+
    "\26\0\6\35\1\145\2\35\1\0\2\35\41\0\1\35"+
    "\3\0\2\35\26\0\7\35\1\145\1\35\1\0\2\35"+
    "\41\0\1\35\3\0\2\35\4\0\1\147\21\0\11\35"+
    "\1\0\2\35\14\0\1\150\24\0\1\35\3\0\2\35"+
    "\26\0\11\35\1\0\2\35\14\0\4\105\1\0\1\105"+
    "\1\0\15\105\2\0\1\105\2\0\1\126\1\0\5\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\126\1\105\2\126\3\105\1\151\1\105\6\0"+
    "\2\152\1\61\17\0\1\61\1\0\1\61\10\0\3\61"+
    "\53\0\1\61\17\0\1\61\1\0\1\61\10\0\3\61"+
    "\51\0\2\153\1\63\17\0\1\63\1\0\1\63\10\0"+
    "\3\63\53\0\1\63\17\0\1\63\1\0\1\63\10\0"+
    "\3\63\53\0\1\154\17\0\1\154\1\0\1\154\10\0"+
    "\3\154\61\0\7\155\1\0\2\155\5\0\1\155\2\0"+
    "\1\156\1\0\1\157\5\0\3\157\2\155\13\0\11\156"+
    "\1\157\2\156\5\157\40\0\1\156\27\0\11\156\1\0"+
    "\2\156\41\0\1\160\3\0\1\161\1\162\26\0\11\161"+
    "\1\0\2\161\41\0\1\162\3\0\1\72\1\162\26\0"+
    "\11\72\1\0\2\72\41\0\1\162\3\0\1\161\1\162"+
    "\26\0\11\161\1\0\2\161\23\0\7\163\1\0\2\163"+
    "\5\0\1\163\2\0\1\156\1\0\1\164\5\0\3\164"+
    "\2\163\13\0\11\156\1\164\2\156\5\164\10\0\1\165"+
    "\17\0\1\165\1\0\1\165\10\0\3\165\53\0\1\166"+
    "\17\0\1\166\1\0\1\166\10\0\3\166\53\0\1\167"+
    "\17\0\1\167\1\0\1\167\10\0\3\167\53\0\1\166"+
    "\17\0\1\167\1\0\1\167\10\0\1\167\1\166\1\167"+
    "\53\0\1\170\17\0\1\170\1\0\1\170\10\0\3\170"+
    "\53\0\1\171\17\0\1\171\1\0\1\171\10\0\3\171"+
    "\53\0\1\172\17\0\1\172\1\0\1\172\10\0\3\172"+
    "\53\0\1\171\17\0\1\172\1\0\1\172\10\0\1\172"+
    "\1\171\1\172\52\0\2\173\1\0\1\173\3\0\13\173"+
    "\1\0\1\173\2\0\1\173\4\0\4\173\2\0\5\173"+
    "\24\0\1\173\2\0\5\173\10\0\1\174\17\0\1\174"+
    "\1\0\1\174\10\0\3\174\52\0\1\105\1\175\2\105"+
    "\1\0\1\105\1\0\12\105\1\175\1\105\1\175\2\0"+
    "\1\105\4\0\1\105\3\175\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\6\0\1\107\1\176\1\116\1\105\1\177"+
    "\1\200\1\105\1\113\12\105\1\116\1\105\1\116\2\0"+
    "\1\105\1\0\1\113\2\0\1\105\3\116\1\201\1\0"+
    "\5\105\1\0\1\106\1\114\1\105\1\115\2\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\7\0\1\105"+
    "\1\202\2\203\1\204\1\105\1\0\12\105\1\202\1\105"+
    "\1\202\2\0\1\105\4\0\1\105\3\202\1\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\10\0\1\205\3\204\14\0"+
    "\1\205\1\0\1\205\10\0\3\205\51\0\1\107\1\110"+
    "\1\116\1\105\1\112\1\0\1\105\1\113\12\105\1\116"+
    "\1\105\1\116\2\0\1\105\1\0\1\113\2\0\1\105"+
    "\3\116\1\105\1\0\5\105\1\0\1\106\1\114\1\105"+
    "\1\115\2\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\4\0\1\206\1\0\1\207\1\210\1\117\1\105"+
    "\1\112\1\0\1\105\1\113\12\105\1\117\1\105\1\117"+
    "\2\0\1\105\1\0\1\113\2\0\1\105\3\117\1\105"+
    "\1\0\5\105\1\0\1\106\1\114\1\105\1\115\2\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\4\0"+
    "\1\206\1\0\2\207\1\120\1\0\1\115\2\0\1\113"+
    "\12\0\1\120\1\0\1\120\4\0\1\113\3\0\3\120"+
    "\11\0\1\113\1\0\1\115\37\0\1\211\1\212\2\124"+
    "\14\0\1\211\1\0\1\211\10\0\3\211\53\0\1\122"+
    "\17\0\1\122\1\0\1\122\10\0\3\122\53\0\1\213"+
    "\17\0\1\213\1\0\1\213\10\0\3\213\52\0\4\105"+
    "\1\0\1\105\1\0\2\105\1\214\12\105\2\0\1\105"+
    "\4\0\5\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\7\0"+
    "\1\105\1\175\2\105\1\0\1\105\1\0\12\105\1\215"+
    "\1\105\1\215\2\0\1\105\4\0\1\105\1\215\1\216"+
    "\1\215\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\6\0"+
    "\1\107\1\217\1\220\1\105\1\221\1\222\1\105\1\113"+
    "\12\105\1\220\1\105\1\220\2\0\1\105\1\0\1\113"+
    "\2\0\1\105\3\220\1\223\1\0\5\105\1\0\1\106"+
    "\1\114\1\105\1\115\2\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\7\0\1\105\1\202\2\203\1\204"+
    "\1\105\1\0\12\105\1\224\1\105\1\224\2\0\1\105"+
    "\4\0\1\105\1\224\1\225\1\224\1\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\30\0\1\226\1\0\1\226\10\0"+
    "\1\226\1\227\1\226\52\0\4\105\1\0\1\105\1\0"+
    "\12\105\1\230\1\105\1\230\2\0\1\105\4\0\1\105"+
    "\1\230\1\231\1\230\1\105\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\6\0\1\107\1\110\1\220\1\105\1\112\1\0"+
    "\1\105\1\113\12\105\1\220\1\105\1\220\2\0\1\105"+
    "\1\0\1\113\2\0\1\105\3\220\1\105\1\0\5\105"+
    "\1\0\1\106\1\114\1\105\1\115\2\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\5\105\7\0\4\105\1\0"+
    "\1\105\1\0\15\105\2\0\1\105\4\0\5\105\1\0"+
    "\1\105\1\232\3\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\7\0\4\105"+
    "\1\0\1\105\1\0\15\105\2\0\1\105\4\0\5\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\1\105\1\233\3\105\7\0"+
    "\4\105\1\0\1\105\1\0\15\105\2\0\1\105\4\0"+
    "\5\105\1\0\1\105\1\127\3\105\1\0\1\106\2\105"+
    "\3\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\7\0\1\105\1\141\2\105\1\0\1\105\1\0\12\105"+
    "\1\141\1\105\1\141\2\0\1\105\4\0\1\105\3\141"+
    "\1\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\7\0\1\105"+
    "\1\234\2\105\1\0\1\105\1\0\12\105\1\234\1\105"+
    "\1\234\2\0\1\105\4\0\1\105\3\234\1\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\71\0\1\235\26\0\1\235"+
    "\24\0\1\35\3\0\2\35\26\0\11\35\1\0\2\35"+
    "\11\0\1\236\64\0\1\237\1\0\1\237\116\0\1\235"+
    "\13\0\1\240\76\0\1\237\14\0\4\105\1\0\1\105"+
    "\1\0\15\105\2\0\1\105\4\0\5\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\4\105\1\232\10\0\1\241\17\0\1\241"+
    "\1\0\1\241\10\0\3\241\53\0\1\242\17\0\1\242"+
    "\1\0\1\242\10\0\3\242\51\0\2\243\1\154\17\0"+
    "\1\154\1\0\1\154\10\0\3\154\61\0\7\155\1\0"+
    "\2\155\5\0\1\155\4\0\1\163\5\0\3\163\2\155"+
    "\24\0\1\163\2\0\5\163\16\0\7\163\1\0\2\163"+
    "\5\0\1\163\4\0\1\157\5\0\3\157\2\163\24\0"+
    "\1\157\2\0\5\157\34\0\1\160\3\0\2\162\26\0"+
    "\11\162\1\0\2\162\41\0\1\162\3\0\2\162\26\0"+
    "\11\162\1\0\2\162\23\0\7\163\1\0\2\163\5\0"+
    "\1\163\4\0\1\163\5\0\5\163\24\0\1\163\2\0"+
    "\5\163\16\0\7\163\1\0\2\163\5\0\1\163\4\0"+
    "\1\164\5\0\3\164\2\163\24\0\1\164\2\0\5\164"+
    "\10\0\1\244\17\0\1\244\1\0\1\244\10\0\3\244"+
    "\53\0\1\245\17\0\1\245\1\0\1\245\10\0\3\245"+
    "\52\0\2\173\1\0\1\173\3\0\7\246\1\173\2\246"+
    "\1\173\1\0\1\173\2\0\1\246\4\0\1\246\3\173"+
    "\2\0\5\246\24\0\1\246\2\0\5\246\4\0\1\206"+
    "\3\0\1\174\1\0\1\115\2\0\1\113\12\0\1\174"+
    "\1\0\1\174\4\0\1\113\3\0\3\174\11\0\1\113"+
    "\1\0\1\115\33\0\1\206\2\0\1\105\1\175\1\105"+
    "\1\112\1\0\1\105\1\113\12\105\1\175\1\105\1\175"+
    "\2\0\1\105\1\0\1\113\2\0\1\105\3\175\1\105"+
    "\1\0\5\105\1\0\1\106\1\114\1\105\1\115\2\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\7\0"+
    "\1\105\1\247\2\105\1\0\1\105\1\0\12\105\1\175"+
    "\1\105\1\175\2\0\1\105\4\0\1\105\1\175\1\250"+
    "\1\175\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\7\0"+
    "\1\105\1\251\2\203\1\204\1\105\1\0\12\105\1\202"+
    "\1\105\1\202\2\0\1\105\4\0\1\105\1\202\1\252"+
    "\1\202\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\10\0"+
    "\1\253\33\0\1\254\53\0\1\105\1\255\2\105\1\0"+
    "\1\105\1\0\15\105\2\0\1\105\4\0\2\105\1\256"+
    "\2\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\6\0\1\257"+
    "\1\260\1\202\2\105\1\0\1\105\1\0\12\105\1\202"+
    "\1\105\1\202\2\0\1\105\4\0\1\105\3\202\1\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\5\105\7\0\1\105\1\202"+
    "\2\105\1\0\1\105\1\0\12\105\1\202\1\105\1\202"+
    "\2\0\1\105\4\0\1\105\3\202\1\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\10\0\1\205\17\0\1\205\1\0"+
    "\1\205\10\0\3\205\51\0\2\257\1\205\17\0\1\205"+
    "\1\0\1\205\10\0\3\205\60\0\1\113\21\0\1\113"+
    "\17\0\1\113\41\0\1\261\17\0\1\261\1\0\1\261"+
    "\10\0\3\261\52\0\1\105\1\262\2\105\1\0\1\105"+
    "\1\0\12\105\1\262\1\105\1\262\2\0\1\105\4\0"+
    "\1\105\3\262\1\105\1\0\5\105\1\0\1\106\2\105"+
    "\3\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\6\0\2\123\1\211\17\0\1\211\1\0\1\211\10\0"+
    "\3\211\53\0\1\211\17\0\1\211\1\0\1\211\10\0"+
    "\3\211\51\0\2\123\1\213\17\0\1\213\1\0\1\213"+
    "\10\0\3\213\52\0\4\105\1\0\1\105\1\0\2\105"+
    "\1\263\12\105\2\0\1\105\4\0\5\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\4\0\1\206\2\0\1\264\1\175"+
    "\1\105\1\112\1\0\1\105\1\113\12\105\1\175\1\105"+
    "\1\175\2\0\1\105\1\0\1\113\2\0\1\105\3\175"+
    "\1\105\1\0\5\105\1\0\1\106\1\114\1\105\1\115"+
    "\2\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\4\0\1\206\2\0\1\264\1\215\1\105\1\112\1\0"+
    "\1\105\1\113\12\105\1\215\1\105\1\175\2\0\1\105"+
    "\1\0\1\113\2\0\1\105\1\175\1\215\1\175\1\105"+
    "\1\0\5\105\1\0\1\106\1\114\1\105\1\115\2\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\7\0"+
    "\1\105\1\247\2\105\1\0\1\105\1\0\12\105\1\215"+
    "\1\105\1\215\2\0\1\105\4\0\1\105\1\215\1\216"+
    "\1\215\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\6\0"+
    "\1\107\1\110\1\265\1\105\1\112\1\0\1\105\1\113"+
    "\12\105\1\265\1\105\1\265\2\0\1\105\1\0\1\113"+
    "\2\0\1\105\3\265\1\105\1\0\5\105\1\0\1\106"+
    "\1\114\1\105\1\115\2\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\7\0\1\105\1\251\2\203\1\204"+
    "\1\105\1\0\12\105\1\224\1\105\1\224\2\0\1\105"+
    "\4\0\1\105\1\224\1\266\1\224\1\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\10\0\1\253\17\0\1\226\1\0"+
    "\1\226\10\0\1\226\1\267\1\226\52\0\1\105\1\255"+
    "\2\105\1\0\1\105\1\0\12\105\1\230\1\105\1\230"+
    "\2\0\1\105\4\0\1\105\1\230\1\231\1\230\1\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\5\105\6\0\1\257\1\260"+
    "\1\202\1\105\1\264\1\270\1\105\1\0\12\105\1\202"+
    "\1\105\1\202\2\0\1\105\4\0\1\105\3\202\1\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\5\105\6\0\1\257\1\260"+
    "\1\224\1\105\1\264\1\270\1\105\1\0\12\105\1\224"+
    "\1\105\1\202\2\0\1\105\4\0\1\105\1\202\1\224"+
    "\1\202\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\12\0"+
    "\2\270\105\0\1\226\1\0\2\270\14\0\1\226\13\0"+
    "\1\226\53\0\4\105\1\0\1\105\1\0\15\105\2\0"+
    "\1\105\4\0\4\105\1\264\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\7\0\1\105\1\230\2\105\1\0\1\105\1\0"+
    "\12\105\1\230\2\105\2\0\1\105\4\0\2\105\1\230"+
    "\1\105\1\264\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\7\0"+
    "\1\127\3\105\1\0\1\105\1\0\15\105\2\0\1\105"+
    "\4\0\5\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\7\0"+
    "\4\105\1\0\1\105\1\0\15\105\2\0\1\105\4\0"+
    "\5\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\1\232\4\105\6\0"+
    "\1\123\1\142\1\234\2\105\1\0\1\105\1\0\12\105"+
    "\1\234\1\105\1\234\2\0\1\105\4\0\1\105\3\234"+
    "\1\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\71\0\1\237"+
    "\1\0\1\237\24\0\1\235\204\0\1\237\15\0\1\271"+
    "\17\0\1\271\1\0\1\271\10\0\3\271\53\0\1\272"+
    "\17\0\1\272\1\0\1\272\10\0\3\272\53\0\1\273"+
    "\17\0\1\273\1\0\1\273\10\0\3\273\52\0\2\173"+
    "\1\0\1\173\3\0\7\274\1\173\2\274\1\173\1\0"+
    "\1\173\2\0\1\274\4\0\1\274\3\173\2\0\5\274"+
    "\24\0\1\274\2\0\5\274\4\0\1\206\2\0\1\105"+
    "\1\215\1\105\1\112\1\0\1\105\1\113\12\105\1\215"+
    "\1\105\1\215\2\0\1\105\1\0\1\113\2\0\1\105"+
    "\3\215\1\105\1\0\5\105\1\0\1\106\1\114\1\105"+
    "\1\115\2\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\4\0\1\206\2\0\1\105\1\215\1\105\1\112"+
    "\1\0\1\105\1\113\12\105\1\215\1\105\1\175\2\0"+
    "\1\105\1\0\1\113\2\0\1\105\1\175\1\215\1\175"+
    "\1\105\1\0\5\105\1\0\1\106\1\114\1\105\1\115"+
    "\2\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\6\0\1\257\1\260\1\275\2\105\1\0\1\105\1\0"+
    "\12\105\1\275\1\105\1\275\2\0\1\105\4\0\1\105"+
    "\3\275\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\6\0"+
    "\1\257\1\260\1\275\2\105\1\0\1\105\1\0\12\105"+
    "\1\275\1\105\1\202\2\0\1\105\4\0\1\105\1\202"+
    "\1\275\1\202\1\105\1\0\5\105\1\0\1\106\2\105"+
    "\3\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\10\0\1\276\17\0\1\276\1\0\1\276\10\0\3\276"+
    "\53\0\1\276\17\0\1\276\13\0\1\276\53\0\1\105"+
    "\1\230\2\105\1\0\1\105\1\0\12\105\1\230\1\105"+
    "\1\230\2\0\1\105\4\0\1\105\3\230\1\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\7\0\1\105\1\230\2\105"+
    "\1\0\1\105\1\0\12\105\1\230\2\105\2\0\1\105"+
    "\4\0\2\105\1\230\2\105\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\10\0\1\277\17\0\1\277\1\0\1\277\10\0"+
    "\3\277\52\0\1\105\1\300\2\105\1\0\1\105\1\0"+
    "\12\105\1\300\1\105\1\300\2\0\1\105\4\0\1\105"+
    "\3\300\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\4\0"+
    "\1\206\3\0\1\261\1\0\1\115\2\0\1\113\12\0"+
    "\1\261\1\0\1\261\4\0\1\113\3\0\3\261\11\0"+
    "\1\113\1\0\1\115\33\0\1\206\2\0\1\105\1\262"+
    "\1\105\1\112\1\0\1\105\1\113\12\105\1\262\1\105"+
    "\1\262\2\0\1\105\1\0\1\113\2\0\1\105\3\262"+
    "\1\105\1\0\5\105\1\0\1\106\1\114\1\105\1\115"+
    "\2\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\7\0\4\105\1\0\1\105\1\0\3\105\1\301\11\105"+
    "\2\0\1\105\4\0\5\105\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\7\0\4\105\1\0\1\105\1\0\12\105\1\302"+
    "\1\105\1\302\2\0\1\105\4\0\1\105\3\302\1\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\5\105\6\0\1\107\1\303"+
    "\1\116\1\105\1\304\1\305\1\105\1\113\12\105\1\116"+
    "\1\105\1\116\2\0\1\105\1\0\1\113\2\0\1\105"+
    "\3\116\1\306\1\0\5\105\1\0\1\106\1\114\1\105"+
    "\1\115\2\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\6\0\1\257\1\260\1\307\1\105\1\264\1\270"+
    "\1\105\1\0\12\105\1\307\1\105\1\202\2\0\1\105"+
    "\4\0\1\105\1\202\1\307\1\202\1\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\10\0\1\310\1\0\2\270\14\0"+
    "\1\310\13\0\1\310\74\0\1\311\1\0\1\311\10\0"+
    "\3\311\51\0\1\257\1\260\1\202\1\105\1\312\1\313"+
    "\1\105\1\0\12\105\1\202\1\105\1\202\2\0\1\105"+
    "\4\0\1\105\3\202\1\105\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\12\0\2\313\104\0\4\105\1\0\1\105\1\0"+
    "\4\105\1\314\10\105\2\0\1\105\4\0\5\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\7\0\1\105\1\315\2\105"+
    "\1\0\1\105\1\0\12\105\1\315\1\105\1\315\2\0"+
    "\1\105\4\0\1\105\3\315\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\4\0\1\316\2\0\1\105\1\175\2\105"+
    "\1\0\1\105\1\0\12\105\1\175\1\105\1\175\2\0"+
    "\1\105\4\0\1\105\3\175\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\7\0\1\105\1\317\2\203\1\204\1\105"+
    "\1\0\12\105\1\320\1\105\1\320\2\0\1\105\4\0"+
    "\1\105\1\320\1\321\1\320\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\10\0\1\322\17\0\1\323\1\0\1\323"+
    "\10\0\1\323\1\324\1\323\52\0\1\105\1\325\2\105"+
    "\1\0\1\105\1\0\12\105\1\326\1\105\1\326\2\0"+
    "\1\105\4\0\1\105\1\326\1\327\1\326\1\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\6\0\1\257\1\260\1\202"+
    "\1\105\1\330\1\331\1\105\1\0\12\105\1\202\1\105"+
    "\1\202\2\0\1\105\4\0\1\105\3\202\1\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\12\0\2\331\105\0\1\332"+
    "\17\0\1\332\1\0\1\332\10\0\3\332\52\0\4\105"+
    "\1\0\1\105\1\0\12\105\1\333\1\105\1\333\2\0"+
    "\1\105\4\0\1\105\3\333\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\30\0\1\334\1\0\1\334\10\0\3\334"+
    "\52\0\4\105\1\0\1\105\1\0\5\105\1\335\7\105"+
    "\2\0\1\105\4\0\5\105\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\7\0\1\105\1\336\2\105\1\0\1\105\1\0"+
    "\12\105\1\336\1\105\1\336\2\0\1\105\4\0\1\105"+
    "\3\336\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\10\0"+
    "\1\337\33\0\1\340\52\0\1\257\1\260\1\341\2\105"+
    "\1\0\1\105\1\0\12\105\1\341\1\105\1\341\2\0"+
    "\1\105\4\0\1\105\3\341\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\6\0\1\257\1\260\1\202\1\105\1\342"+
    "\1\343\1\105\1\0\12\105\1\202\1\105\1\202\2\0"+
    "\1\105\4\0\1\105\3\202\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\6\0\1\257\1\260\1\344\1\105\1\342"+
    "\1\343\1\105\1\0\12\105\1\344\1\105\1\202\2\0"+
    "\1\105\4\0\1\105\1\202\1\344\1\202\1\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\10\0\1\345\17\0\1\345"+
    "\1\0\1\345\10\0\3\345\55\0\2\343\105\0\1\346"+
    "\1\0\2\343\14\0\1\346\13\0\1\346\53\0\1\105"+
    "\1\347\2\105\1\0\1\105\1\0\12\105\1\347\1\105"+
    "\1\347\2\0\1\105\4\0\1\105\3\347\1\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\7\0\4\105\1\0\1\105"+
    "\1\0\15\105\2\0\1\105\4\0\4\105\1\342\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\7\0\1\105\1\350\2\105"+
    "\1\0\1\105\1\0\12\105\1\350\2\105\2\0\1\105"+
    "\4\0\2\105\1\350\1\105\1\342\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\7\0\4\105\1\0\1\105\1\0\12\105"+
    "\1\351\1\105\1\351\2\0\1\105\4\0\1\105\3\351"+
    "\1\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\30\0\1\352"+
    "\1\0\1\352\10\0\3\352\53\0\1\353\17\0\1\353"+
    "\1\0\1\353\10\0\3\353\52\0\1\105\1\354\2\105"+
    "\1\0\1\105\1\0\12\105\1\354\1\105\1\354\2\0"+
    "\1\105\4\0\1\105\3\354\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\10\0\1\355\17\0\1\355\1\0\1\355"+
    "\10\0\3\355\52\0\4\105\1\0\1\105\1\0\6\105"+
    "\1\356\6\105\2\0\1\105\4\0\5\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\7\0\1\105\1\357\2\105\1\0"+
    "\1\105\1\0\12\105\1\357\1\105\1\357\2\0\1\105"+
    "\4\0\1\105\3\357\1\105\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\10\0\1\360\17\0\1\360\1\0\1\360\10\0"+
    "\3\360\53\0\1\360\17\0\1\360\13\0\1\360\52\0"+
    "\1\257\1\260\1\202\1\105\1\361\1\362\1\105\1\0"+
    "\12\105\1\202\1\105\1\202\2\0\1\105\4\0\1\105"+
    "\3\202\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\7\0"+
    "\4\105\1\0\1\105\1\0\12\105\1\363\1\105\1\364"+
    "\2\0\1\105\4\0\1\105\1\364\1\363\1\365\1\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\5\105\30\0\1\366\1\0"+
    "\1\367\10\0\1\367\1\366\1\370\51\0\1\257\1\260"+
    "\1\202\1\105\1\371\1\372\1\105\1\0\12\105\1\202"+
    "\1\105\1\202\2\0\1\105\4\0\1\105\3\202\1\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\5\105\12\0\2\362\107\0"+
    "\2\372\104\0\4\105\1\0\1\105\1\0\15\105\2\0"+
    "\1\105\4\0\4\105\1\361\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\7\0\4\105\1\0\1\105\1\0\15\105\2\0"+
    "\1\105\4\0\4\105\1\371\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\7\0\1\105\1\373\2\105\1\0\1\105\1\0"+
    "\12\105\1\373\1\105\1\373\2\0\1\105\4\0\1\105"+
    "\3\373\1\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105\10\0"+
    "\1\374\17\0\1\374\1\0\1\374\10\0\3\374\53\0"+
    "\1\375\17\0\1\375\1\0\1\375\10\0\3\375\52\0"+
    "\1\105\1\376\2\105\1\0\1\105\1\0\12\105\1\376"+
    "\1\105\1\376\2\0\1\105\4\0\1\105\3\376\1\105"+
    "\1\0\5\105\1\0\1\106\2\105\3\0\2\105\1\0"+
    "\1\105\11\0\1\105\2\0\5\105\10\0\1\377\17\0"+
    "\1\377\1\0\1\377\10\0\3\377\52\0\4\105\1\0"+
    "\1\105\1\0\7\105\1\u0100\5\105\2\0\1\105\4\0"+
    "\5\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\7\0\1\u0101"+
    "\110\0\1\105\1\u0102\2\105\1\0\1\105\1\0\12\105"+
    "\1\u0102\2\105\2\0\1\105\4\0\2\105\1\u0102\1\u0103"+
    "\1\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\10\0\1\u0104"+
    "\17\0\1\u0104\13\0\1\u0104\1\u0105\52\0\1\105\1\364"+
    "\2\105\1\0\1\105\1\0\12\105\1\364\1\105\1\364"+
    "\2\0\1\105\4\0\1\105\3\364\1\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\7\0\1\105\1\364\2\105\1\0"+
    "\1\105\1\0\15\105\2\0\1\105\4\0\2\105\1\364"+
    "\2\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\10\0\1\367"+
    "\17\0\1\367\1\0\1\367\10\0\3\367\53\0\1\367"+
    "\33\0\1\367\53\0\1\105\1\u0102\2\105\1\0\1\105"+
    "\1\0\12\105\1\363\1\105\1\364\2\0\1\105\4\0"+
    "\1\105\1\364\1\363\1\365\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\10\0\1\u0104\17\0\1\366\1\0\1\367"+
    "\10\0\1\367\1\366\1\370\52\0\1\105\1\u0106\2\105"+
    "\1\0\1\105\1\0\12\105\1\u0106\1\105\1\u0106\2\0"+
    "\1\105\4\0\1\105\3\u0106\1\105\1\0\5\105\1\0"+
    "\1\106\2\105\3\0\2\105\1\0\1\105\11\0\1\105"+
    "\2\0\5\105\10\0\1\u0107\17\0\1\u0107\1\0\1\u0107"+
    "\10\0\3\u0107\52\0\1\105\1\u0108\2\105\1\0\1\105"+
    "\1\0\12\105\1\u0108\1\105\1\u0108\2\0\1\105\4\0"+
    "\1\105\3\u0108\1\105\1\0\5\105\1\0\1\106\2\105"+
    "\3\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\10\0\1\u0109\17\0\1\u0109\1\0\1\u0109\10\0\3\u0109"+
    "\52\0\4\105\1\0\1\105\1\0\10\105\1\u010a\4\105"+
    "\2\0\1\105\4\0\5\105\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\4\0\1\362\113\0\1\105\1\u010b\2\105\1\0"+
    "\1\105\1\0\12\105\1\u010b\1\105\1\u010b\2\0\1\105"+
    "\4\0\1\105\3\u010b\1\105\1\0\5\105\1\0\1\106"+
    "\2\105\3\0\2\105\1\0\1\105\11\0\1\105\2\0"+
    "\5\105\10\0\1\u010c\17\0\1\u010c\1\0\1\u010c\10\0"+
    "\3\u010c\52\0\4\105\1\0\1\105\1\0\15\105\2\0"+
    "\1\105\4\0\5\105\1\375\5\105\1\0\1\106\2\105"+
    "\3\0\2\105\1\0\1\105\11\0\1\105\2\0\5\105"+
    "\47\0\1\375\50\0\4\105\1\0\1\105\1\0\11\105"+
    "\1\u010d\3\105\2\0\1\105\4\0\5\105\1\0\5\105"+
    "\1\0\1\106\2\105\3\0\2\105\1\0\1\105\11\0"+
    "\1\105\2\0\5\105\7\0\4\105\1\0\1\105\1\0"+
    "\7\105\1\u010e\5\105\2\0\1\105\4\0\5\105\1\0"+
    "\5\105\1\0\1\106\2\105\3\0\2\105\1\0\1\105"+
    "\11\0\1\105\2\0\5\105\7\0\4\105\1\0\1\105"+
    "\1\0\12\105\1\u010f\1\105\1\u010f\2\0\1\105\4\0"+
    "\5\105\1\0\5\105\1\0\1\106\2\105\3\0\2\105"+
    "\1\0\1\105\11\0\1\105\2\0\5\105\7\0\4\105"+
    "\1\0\1\105\1\0\13\105\1\114\1\105\2\0\1\105"+
    "\4\0\5\105\1\0\5\105\1\0\1\106\2\105\3\0"+
    "\2\105\1\0\1\105\11\0\1\105\2\0\5\105";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\7\11\26\1\1\11\1\1\1\11\16\1\1\11"+
    "\16\1\4\0\1\1\1\0\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\3\0\2\1\1\0\1\1\3\0\1\1"+
    "\3\0\1\1\3\0\1\1\6\0\11\1\1\11\1\1"+
    "\1\0\1\11\1\1\2\0\2\1\4\0\1\1\2\0"+
    "\1\1\5\0\1\1\1\0\2\1\1\0\1\1\3\0"+
    "\2\1\6\0\1\1\1\11\3\0\2\1\4\0\4\1"+
    "\6\0\2\1\2\0\2\1\2\0\1\1\2\11\2\1"+
    "\1\0\2\1\6\0\1\1\7\0\3\1\17\0\1\1"+
    "\2\0\1\1\12\0\1\1\3\0\4\1\1\11\1\1"+
    "\4\0\1\11\15\0\2\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	JCas UIMA_JCas;

	Range currentRange;
	Currensy currentCurrensy;
	ComplexWord currentComplexWord;	
	Date currentDate;		
	
	boolean inRange;
	boolean currensyEnd;
	boolean inComplex;
	boolean inDate;

	int beginPosition;
	

	public JFlex_Tokenizer(java.io.Reader in, JCas UIMA_JCas) {
		this.UIMA_JCas = UIMA_JCas;
    	this.zzReader = in;
    	allBooleansToFalse();
    }
    
    public void allBooleansToFalse() {
    	this.inRange = false; 
    	this.currensyEnd = false; 
    	this.inComplex = false;
    	this.inDate = false; 		
    }
	public boolean isEof() {
		return zzAtEOF;
	}

	private void back() {
		yypushback(yylength());
	}	  
	
	public Letters getLettersToken(String language, String letterCase) {
		Letters token = new Letters(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setLanguage(language);
		token.setLetterCase(letterCase);
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Number getNumberToken(String kind, String sign) {
		Number token = new Number(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setKind(kind);
		token.setSign(sign);
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Separator getSeparatorToken(String kind) {
		Separator token = new Separator(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setKind(kind);		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public PM getPmToken() {
		PM token = new PM(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Bracket getBracketToken() {
		Bracket token = new Bracket(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Symbol getSymbolToken() {
		Symbol token = new Symbol(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Abbrevation getAbbrevationToken(String lang) {
		Abbrevation token = new Abbrevation(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLanguage(lang);
		return token;
	}
	public RussianWord getRussianWordToken() {
    		RussianWord token = new RussianWord(UIMA_JCas);
    		token.setNorm(null);
    		token.setText(yytext().toString());
    		token.setBegin(zzCurrentPos);
    		token.setEnd(zzCurrentPos + yylength());
    		return token;
    	}

	public Range getRangeToken(String left, String right) {
		Range token = new Range(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLeft(left);
		token.setRight(right);
		return token;
	}	

	public Currensy getCurrensyToken(String value, String kindOfCurrensy) {
		Currensy token = new Currensy(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setValue(value);
		token.setCurrensySymbol(kindOfCurrensy);
		return token;
	}

/*	public Measurement getMeasurementToken(Number value, String unitName) {
		Measurement token = new Measurement(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());

	}*/

	public ComplexWord getComplexWordToken(String left, String right) {
		ComplexWord token = new ComplexWord(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLeft(left);
		token.setRight(right);
		return token;
	}

	public Date getDateToken(String year, String mounth, String day) {
		Date token = new Date(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setYear(year);
		token.setMounth(mounth);
		token.setDay(day);
		return token;
	}

	public Email getEmailToken() {
		Email token = new Email(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlex_Tokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JFlex_Tokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 264) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { return getEmailToken();
          }
        case 42: break;
        case 14: 
          { Symbol currensySymbol = getSymbolToken();
			currentCurrensy.setCurrensySymbol(currensySymbol.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);				
				currensyEnd = true;
			}
			return currensySymbol;
          }
        case 43: break;
        case 28: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Mixed");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Mixed");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 44: break;
        case 7: 
          { yybegin(YYINITIAL); return getPmToken();
          }
        case 45: break;
        case 31: 
          { currentRange = getRangeToken(null, null);
			yybegin(IN_RANGE);
			back();
			return currentRange;
          }
        case 46: break;
        case 21: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setMounth(number.getText());
			inDate = false;
		}
		else {
			currentDate.setDay(number.getText());			
			inDate = true;
		}
		yybegin(IN_DATE_DMY);
		return number;
          }
        case 47: break;
        case 8: 
          { yybegin(YYINITIAL); return getNumberToken("Integer","Positive");
          }
        case 48: break;
        case 15: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Upper");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Upper");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 49: break;
        case 5: 
          { yybegin(YYINITIAL); return getSeparatorToken("Space");
          }
        case 50: break;
        case 11: 
          { yybegin(YYINITIAL); return getRussianWordToken();
          }
        case 51: break;
        case 30: 
          { yybegin(YYINITIAL); return getNumberToken("Real","Positive");
          }
        case 52: break;
        case 38: 
          { Number number = getNumberToken("Integer","Positive");
		currentDate.setYear(number.getText());
		yybegin(YYINITIAL);
		return number;
          }
        case 53: break;
        case 22: 
          { currentCurrensy = getCurrensyToken(null, null);
			yybegin(IN_CURRENSY);
			back();			
			return currentCurrensy;
          }
        case 54: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 55: break;
        case 17: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Lower");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Lower");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 56: break;
        case 24: 
          { yybegin(YYINITIAL); return getAbbrevationToken("English");
          }
        case 57: break;
        case 32: 
          { yybegin(YYINITIAL); return getAbbrevationToken("Russian");
          }
        case 58: break;
        case 23: 
          { yybegin(YYINITIAL); return getNumberToken("Integer","Negative");
          }
        case 59: break;
        case 26: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Capital");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Capital");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 60: break;
        case 13: 
          { Number numberValue = getNumberToken("Integer","Positive");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);			
				currensyEnd = true;
			}
			return numberValue;
          }
        case 61: break;
        case 10: 
          { yybegin(YYINITIAL); return getBracketToken();
          }
        case 62: break;
        case 2: 
          { yybegin(YYINITIAL); return getSeparatorToken("New line");
          }
        case 63: break;
        case 35: 
          { yybegin(YYINITIAL); return getNumberToken("Real","Negative");
          }
        case 64: break;
        case 9: 
          { yybegin(YYINITIAL); return getSymbolToken();
          }
        case 65: break;
        case 34: 
          { Number numberValue = getNumberToken("Real","Positive");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);				
				currensyEnd = true;
			}
			return numberValue;
          }
        case 66: break;
        case 41: 
          { currentDate = getDateToken(null,null,null);
			yybegin(IN_DATE_YMD);
			back();
			return currentDate;
          }
        case 67: break;
        case 40: 
          { currentDate = getDateToken(null,null,null);
			yybegin(IN_DATE_DMY);
			back();
			return currentDate;
          }
        case 68: break;
        case 19: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Lower");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Lower");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 69: break;
        case 20: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setDay(number.getText());
			yybegin(YYINITIAL);
			inDate = false;
		}
		else {
			currentDate.setMounth(number.getText());
			yybegin(IN_DATE_YMD);
			inDate = true;
		}
		return number;
          }
        case 70: break;
        case 3: 
          { yybegin(YYINITIAL); return getSeparatorToken("Carrige return");
          }
        case 71: break;
        case 29: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setMounth(number.getText());			
			inDate = false;
		}
		else {
			currentDate.setDay(number.getText());			
			inDate = true;
		}
		yybegin(IN_DATE_DMY);
		return number;
          }
        case 72: break;
        case 6: 
          { yybegin(YYINITIAL); return getSeparatorToken("Form feed");
          }
        case 73: break;
        case 33: 
          { if (inRange == true) {
				yybegin(YYINITIAL); 
				Number numberRight = getNumberToken("Real","Positive");
				currentRange.setRight(numberRight.getText());
				inRange = false;
				return numberRight;
			}
			else {
				yybegin(IN_RANGE);
				Number numberLeft = getNumberToken("Real","Positive");
				currentRange.setLeft(numberLeft.getText());
				inRange = true;
				return numberLeft;
			}
          }
        case 74: break;
        case 27: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Capital");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Capital");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 75: break;
        case 36: 
          { Number numberValue = getNumberToken("Real","Negative");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);
				currensyEnd = true;
			}
			return numberValue;
          }
        case 76: break;
        case 18: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Mixed");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Mixed");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 77: break;
        case 12: 
          { if (inRange == true) {
				yybegin(YYINITIAL); 
				Number numberRight = getNumberToken("Integer","Positive");
				currentRange.setRight(numberRight.getText());
				inRange = false;
				return numberRight;
			}
			else {
				yybegin(IN_RANGE);
				Number numberLeft = getNumberToken("Integer","Positive");
				currentRange.setLeft(numberLeft.getText());
				inRange = true;
				return numberLeft;
			}
          }
        case 78: break;
        case 16: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Upper");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Upper");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 79: break;
        case 4: 
          { yybegin(YYINITIAL); return getSeparatorToken("Tabulation");
          }
        case 80: break;
        case 25: 
          { Number numberValue = getNumberToken("Integer","Negative");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);			
				currensyEnd = true;
			}
			return numberValue;
          }
        case 81: break;
        case 37: 
          { Number number = getNumberToken("Integer","Positive");
		currentDate.setYear(number.getText());
		return number;
          }
        case 82: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java JFlex_Tokenizer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        JFlex_Tokenizer scanner = null;
        try {
          scanner = new JFlex_Tokenizer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
