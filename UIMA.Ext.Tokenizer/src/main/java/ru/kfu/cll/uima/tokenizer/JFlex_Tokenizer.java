/* The following code was generated by JFlex 1.4.3 on 27.03.13 15:50 */

// Sidikov Marsel

package ru.kfu.cll.uima.tokenizer;
import ru.kfu.cll.uima.tokenizer.types.Token;
import ru.kfu.cll.uima.tokenizer.types.Letters;
import ru.kfu.cll.uima.tokenizer.types.Number;
import ru.kfu.cll.uima.tokenizer.types.Separator;
import ru.kfu.cll.uima.tokenizer.types.PM;
import ru.kfu.cll.uima.tokenizer.types.Bracket;
import ru.kfu.cll.uima.tokenizer.types.Symbol;
import ru.kfu.cll.uima.tokenizer.types.Range;
import ru.kfu.cll.uima.tokenizer.types.Abbrevation;
import ru.kfu.cll.uima.tokenizer.types.Currensy;
import ru.kfu.cll.uima.tokenizer.types.Measurement;
import ru.kfu.cll.uima.tokenizer.types.ComplexWord;
import ru.kfu.cll.uima.tokenizer.types.Date;
import ru.kfu.cll.uima.tokenizer.types.Email;
import ru.kfu.cll.uima.tokenizer.types.Abbrevation;
import ru.kfu.cll.uima.tokenizer.types.RussianWord;
import org.apache.uima.jcas.JCas;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27.03.13 15:50 from the specification file
 * <tt>UIMA.Ext.Tokenizer/data/jflex/JFlex_Tokenizer.flex</tt>
 */
public class JFlex_Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IN_DATE_YMD = 10;
  public static final int IN_RANGE = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_COMPLEX = 8;
  public static final int IN_PERCENTS = 14;
  public static final int IN_CURRENSY = 4;
  public static final int IN_DATE_DMY = 12;
  public static final int IN_MEAS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\0\1\5\1\2\22\0\1\4\1\66\1\67"+
    "\1\14\1\60\1\14\1\14\1\0\2\63\1\14\1\11\1\6\1\12"+
    "\1\7\1\47\1\10\1\45\1\30\1\46\1\32\1\44\1\44\3\44"+
    "\1\56\1\56\1\67\1\14\1\67\1\66\1\57\1\54\1\35\1\16"+
    "\1\35\1\21\1\35\2\35\1\26\3\35\1\55\1\22\1\35\1\27"+
    "\1\35\1\20\1\23\1\35\1\17\3\35\1\24\1\35\1\64\1\36"+
    "\1\50\1\70\1\25\1\36\1\51\1\43\1\114\1\43\1\106\7\43"+
    "\1\52\1\111\1\112\1\53\3\43\1\113\4\43\1\102\1\43\1\65"+
    "\1\61\1\31\1\61\44\36\1\37\1\36\1\37\5\36\1\33\4\36"+
    "\1\33\12\36\1\33\u0345\36\1\42\16\36\17\41\1\107\1\41\1\34"+
    "\16\41\1\40\1\101\1\40\1\100\1\72\1\105\1\71\1\40\1\103"+
    "\3\40\1\77\1\40\1\104\1\74\1\75\1\76\1\73\4\40\1\110"+
    "\10\40\1\0\1\40\u1bc2\0\1\62\21\0\1\56\174\0\1\15\10\0"+
    "\1\15\151\0\1\67\373\0\1\13\udded\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\7\1\1\2\11\3\1\1\10\1\12"+
    "\1\10\1\11\1\13\1\1\1\11\1\13\1\10\1\1"+
    "\1\12\2\1\2\11\1\12\1\11\10\13\1\1\1\13"+
    "\1\14\1\1\1\15\2\1\1\16\1\17\1\1\1\20"+
    "\1\21\1\22\1\23\1\1\3\24\1\1\3\25\4\0"+
    "\1\10\1\0\2\26\1\0\1\10\2\27\1\0\1\26"+
    "\3\0\1\13\1\30\1\0\1\10\3\0\1\10\2\13"+
    "\3\0\1\26\3\0\1\13\1\0\1\13\3\0\1\13"+
    "\2\0\1\31\1\17\1\32\1\33\1\20\1\32\1\22"+
    "\1\34\1\23\2\24\1\0\1\35\1\25\2\0\2\36"+
    "\4\0\1\37\2\0\1\37\5\0\1\26\1\0\2\36"+
    "\1\0\1\10\3\0\2\37\4\0\1\13\2\0\1\26"+
    "\1\40\2\0\1\13\1\0\1\41\1\42\4\0\2\36"+
    "\2\37\6\0\2\43\2\0\1\10\1\37\2\0\1\13"+
    "\1\44\1\45\1\46\1\47\1\37\1\0\2\37\6\0"+
    "\1\37\2\0\1\13\5\0\3\37\17\0\1\37\2\0"+
    "\1\37\12\0\1\50\3\0\6\51\4\0\1\50\15\0"+
    "\2\50\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b\0\u021b\0\u0268\0\u02b5"+
    "\0\u0302\0\u034f\0\u039c\0\u0268\0\u03e9\0\u0436\0\u0483\0\u04d0"+
    "\0\u051d\0\u0483\0\u056a\0\u05b7\0\u0604\0\u05b7\0\u0651\0\u069e"+
    "\0\u06eb\0\u0268\0\u05b7\0\u0738\0\u0785\0\u021b\0\u07d2\0\u021b"+
    "\0\u0483\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed"+
    "\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55"+
    "\0\u021b\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0e70"+
    "\0\u0ebd\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u0268"+
    "\0\u10d8\0\u1125\0\u1172\0\u11bf\0\u120c\0\u021b\0\u0268\0\u1259"+
    "\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da\0\u13da\0\u1427\0\u1474"+
    "\0\u05b7\0\u0268\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642"+
    "\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u1810\0\u1810\0\u185d"+
    "\0\u18aa\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5"+
    "\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u0cef\0\u1c46\0\u1c93\0\u0dd6"+
    "\0\u1ce0\0\u1d2d\0\u1d7a\0\u021b\0\u1dc7\0\u1dc7\0\u021b\0\u1e14"+
    "\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f"+
    "\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297"+
    "\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff"+
    "\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767"+
    "\0\u27b4\0\u2801\0\u284e\0\u289b\0\u021b\0\u28e8\0\u2935\0\u2982"+
    "\0\u29cf\0\u1b12\0\u1b5f\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50"+
    "\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8"+
    "\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020"+
    "\0\u306d\0\u30ba\0\u2a1c\0\u021b\0\u021b\0\u2b03\0\u3107\0\u3154"+
    "\0\u2db8\0\u2e05\0\u31a1\0\u31ee\0\u323b\0\u3288\0\u32d5\0\u3322"+
    "\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u358a"+
    "\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b\0\u3758\0\u37a5\0\u37f2"+
    "\0\u383f\0\u388c\0\u38d9\0\u3926\0\u3973\0\u39c0\0\u3a0d\0\u3a5a"+
    "\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2"+
    "\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u3f2a"+
    "\0\u3f77\0\u0268\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u0268\0\u40f8"+
    "\0\u4145\0\u021b\0\u4192\0\u41df\0\u422c\0\u4279\0\u42c6\0\u021b"+
    "\0\u4313\0\u4360\0\u43ad\0\u43fa\0\u40ab\0\u40f8\0\u4145\0\u4192"+
    "\0\u4447\0\u4494\0\u44e1\0\u452e\0\u457b\0\u44e1\0\u452e\0\u45c8"+
    "\0\u4615\0\u4662";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\10\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\27\1\36"+
    "\1\37\3\40\1\27\1\33\1\31\1\41\1\42\1\43"+
    "\1\44\1\27\1\45\1\30\1\27\1\16\1\46\1\47"+
    "\1\27\1\16\1\50\1\43\1\32\1\17\1\46\1\51"+
    "\1\52\1\53\1\54\1\55\1\40\1\56\1\40\1\57"+
    "\1\60\1\27\1\61\2\40\1\62\1\63\1\40\4\27"+
    "\10\10\1\64\1\65\16\10\1\64\1\10\1\64\11\10"+
    "\3\64\56\10\1\66\1\67\2\70\1\10\1\71\12\10"+
    "\1\66\1\10\1\66\4\10\1\71\4\10\3\66\11\10"+
    "\1\71\167\10\7\72\1\73\2\72\1\10\1\73\1\10"+
    "\1\73\1\74\1\72\2\73\1\75\1\74\1\76\1\77"+
    "\4\10\1\73\3\77\2\72\3\10\1\73\2\10\2\73"+
    "\2\10\1\73\11\75\1\77\3\75\1\77\1\74\1\75"+
    "\4\77\10\10\1\100\17\10\1\101\1\10\1\102\11\10"+
    "\1\102\1\101\1\103\56\10\1\104\17\10\1\105\1\10"+
    "\1\106\11\10\1\106\1\105\1\107\46\10\124\0\4\110"+
    "\1\0\1\110\1\0\15\110\2\0\1\110\5\0\5\110"+
    "\1\0\5\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\3\0\1\110\2\0\4\110\6\0"+
    "\1\112\1\113\1\114\1\110\1\115\1\0\1\110\1\116"+
    "\12\110\1\114\1\110\1\114\2\0\1\110\1\0\1\116"+
    "\3\0\1\110\3\114\1\110\1\0\5\110\1\0\1\111"+
    "\1\117\1\110\1\120\2\0\2\110\1\0\1\110\11\0"+
    "\1\110\3\0\1\110\2\0\4\110\7\0\1\110\1\121"+
    "\2\110\1\0\1\110\1\0\12\110\1\121\1\110\1\121"+
    "\2\0\1\110\5\0\1\110\3\121\1\110\1\0\5\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\3\0\1\110\2\0\4\110\7\0\1\110\1\122"+
    "\2\110\1\0\1\110\1\0\12\110\1\122\1\110\1\122"+
    "\2\0\1\110\5\0\1\110\3\122\1\110\1\0\5\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\3\0\1\110\2\0\4\110\10\0\1\123\17\0"+
    "\1\123\1\0\1\123\11\0\3\123\52\0\1\124\3\0"+
    "\1\125\1\126\2\127\14\0\1\125\1\0\1\125\11\0"+
    "\3\125\55\0\4\110\1\0\1\110\1\0\1\110\1\130"+
    "\13\110\2\0\1\110\2\0\1\131\2\0\5\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\131\1\110\3\131\1\110\1\0\1\131\4\110\7\0"+
    "\4\110\1\0\1\110\1\0\15\110\2\0\1\110\2\0"+
    "\1\131\2\0\5\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\131\1\110\3\131\1\110"+
    "\1\0\1\131\4\110\7\0\4\110\1\0\1\110\1\0"+
    "\15\110\2\0\1\110\2\0\1\131\2\0\5\110\1\0"+
    "\4\110\1\132\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\131\1\110\3\131\1\110\1\0\1\131\4\110"+
    "\6\0\1\112\1\133\1\134\1\110\1\135\1\136\1\110"+
    "\1\116\12\110\1\134\1\110\1\134\2\0\1\110\1\0"+
    "\1\116\3\0\1\110\3\134\1\137\1\0\5\110\1\0"+
    "\1\111\1\117\1\110\1\120\2\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\6\0\1\112"+
    "\1\133\1\140\1\110\1\135\1\136\1\110\1\116\12\110"+
    "\1\140\1\110\1\140\2\0\1\110\1\0\1\116\3\0"+
    "\1\110\3\140\1\137\1\0\5\110\1\0\1\111\1\117"+
    "\1\110\1\120\2\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\40\0\1\131\30\0\11\131"+
    "\1\0\3\131\2\0\1\131\40\0\1\40\3\0\3\40"+
    "\26\0\3\40\1\141\5\40\1\0\1\40\1\142\1\40"+
    "\1\0\2\40\10\0\1\124\3\0\1\125\1\126\2\127"+
    "\14\0\1\125\1\0\1\125\5\0\1\131\3\0\3\125"+
    "\22\0\11\131\1\0\3\131\2\0\1\131\40\0\1\40"+
    "\3\0\3\40\26\0\11\40\1\0\3\40\1\0\2\40"+
    "\12\0\1\112\1\133\1\134\1\110\1\135\1\136\1\110"+
    "\1\116\12\110\1\140\1\110\1\140\2\0\1\110\1\0"+
    "\1\116\3\0\1\110\1\140\1\134\1\140\1\137\1\0"+
    "\5\110\1\0\1\111\1\117\1\110\1\120\2\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\7\0\1\143\3\110\1\0\1\110\1\0\15\110\2\0"+
    "\1\110\2\0\1\131\2\0\5\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\131\1\110"+
    "\3\131\1\110\1\0\1\131\1\144\3\110\7\0\1\145"+
    "\3\110\1\0\1\110\1\0\15\110\2\0\1\110\2\0"+
    "\1\131\2\0\5\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\131\1\110\3\131\1\110"+
    "\1\0\1\131\4\110\4\0\1\124\2\0\1\110\1\146"+
    "\1\147\1\150\1\127\1\110\1\0\12\110\1\146\1\110"+
    "\1\146\2\0\1\110\5\0\1\110\3\146\1\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\34\0\1\40"+
    "\3\0\3\40\4\0\1\151\21\0\11\40\1\0\3\40"+
    "\1\0\2\40\40\0\1\40\3\0\3\40\26\0\4\40"+
    "\1\152\4\40\1\0\3\40\1\0\2\40\13\0\1\153"+
    "\24\0\1\40\3\0\3\40\26\0\11\40\1\0\3\40"+
    "\1\0\2\40\40\0\1\40\3\0\3\40\26\0\4\40"+
    "\1\154\4\40\1\0\3\40\1\0\2\40\40\0\1\40"+
    "\3\0\3\40\26\0\6\40\1\152\2\40\1\0\1\40"+
    "\1\142\1\40\1\0\2\40\40\0\1\40\3\0\3\40"+
    "\26\0\7\40\1\152\1\40\1\0\3\40\1\0\2\40"+
    "\40\0\1\40\3\0\3\40\4\0\1\155\21\0\11\40"+
    "\1\0\3\40\1\0\2\40\13\0\1\156\24\0\1\40"+
    "\3\0\3\40\26\0\11\40\1\0\3\40\1\0\2\40"+
    "\13\0\4\110\1\0\1\110\1\0\15\110\2\0\1\110"+
    "\2\0\1\131\2\0\5\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\131\1\110\3\131"+
    "\1\110\1\0\1\131\2\110\1\157\1\110\34\0\1\40"+
    "\3\0\3\40\26\0\4\40\1\160\4\40\1\0\3\40"+
    "\1\0\2\40\12\0\2\161\1\64\17\0\1\64\1\0"+
    "\1\64\11\0\3\64\56\0\1\64\17\0\1\64\1\0"+
    "\1\64\11\0\3\64\54\0\2\162\1\66\17\0\1\66"+
    "\1\0\1\66\11\0\3\66\56\0\1\66\17\0\1\66"+
    "\1\0\1\66\11\0\3\66\56\0\1\163\17\0\1\163"+
    "\1\0\1\163\11\0\3\163\64\0\7\164\1\0\2\164"+
    "\5\0\1\164\2\0\1\165\2\0\1\166\5\0\3\166"+
    "\2\164\13\0\11\165\1\166\3\165\1\166\1\0\1\165"+
    "\4\166\40\0\1\165\30\0\11\165\1\0\3\165\2\0"+
    "\1\165\40\0\1\167\3\0\1\170\1\167\1\171\26\0"+
    "\11\170\1\0\3\170\1\0\1\167\1\170\40\0\1\171"+
    "\3\0\1\75\2\171\26\0\11\75\1\0\3\75\1\0"+
    "\1\171\1\75\40\0\1\171\3\0\1\170\2\171\26\0"+
    "\11\170\1\0\3\170\1\0\1\171\1\170\22\0\7\172"+
    "\1\0\2\172\5\0\1\172\2\0\1\165\2\0\1\173"+
    "\5\0\3\173\2\172\13\0\11\165\1\173\3\165\1\173"+
    "\1\0\1\165\4\173\10\0\1\174\17\0\1\174\1\0"+
    "\1\174\11\0\3\174\56\0\1\175\17\0\1\175\1\0"+
    "\1\175\11\0\3\175\56\0\1\176\17\0\1\176\1\0"+
    "\1\176\11\0\3\176\56\0\1\175\17\0\1\176\1\0"+
    "\1\176\11\0\1\176\1\175\1\176\56\0\1\177\17\0"+
    "\1\177\1\0\1\177\11\0\3\177\56\0\1\200\17\0"+
    "\1\200\1\0\1\200\11\0\3\200\56\0\1\201\17\0"+
    "\1\201\1\0\1\201\11\0\3\201\56\0\1\200\17\0"+
    "\1\201\1\0\1\201\11\0\1\201\1\200\1\201\55\0"+
    "\2\202\1\0\1\202\3\0\13\202\1\0\1\202\2\0"+
    "\1\202\5\0\4\202\2\0\5\202\24\0\1\202\3\0"+
    "\1\202\2\0\4\202\10\0\1\203\17\0\1\203\1\0"+
    "\1\203\11\0\3\203\55\0\1\110\1\204\2\110\1\0"+
    "\1\110\1\0\12\110\1\204\1\110\1\204\2\0\1\110"+
    "\5\0\1\110\3\204\1\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\6\0\1\112\1\205\1\121\1\110"+
    "\1\206\1\207\1\110\1\116\12\110\1\121\1\110\1\121"+
    "\2\0\1\110\1\0\1\116\3\0\1\110\3\121\1\210"+
    "\1\0\5\110\1\0\1\111\1\117\1\110\1\120\2\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\7\0\1\110\1\211\2\212\1\213\1\110\1\0"+
    "\12\110\1\211\1\110\1\211\2\0\1\110\5\0\1\110"+
    "\3\211\1\110\1\0\5\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\10\0\1\214\3\213\14\0\1\214\1\0\1\214"+
    "\11\0\3\214\54\0\1\112\1\113\1\121\1\110\1\115"+
    "\1\0\1\110\1\116\12\110\1\121\1\110\1\121\2\0"+
    "\1\110\1\0\1\116\3\0\1\110\3\121\1\110\1\0"+
    "\5\110\1\0\1\111\1\117\1\110\1\120\2\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\4\0\1\215\1\0\1\216\1\217\1\122\1\110\1\115"+
    "\1\0\1\110\1\116\12\110\1\122\1\110\1\122\2\0"+
    "\1\110\1\0\1\116\3\0\1\110\3\122\1\110\1\0"+
    "\5\110\1\0\1\111\1\117\1\110\1\120\2\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\4\0\1\215\1\0\2\216\1\123\1\0\1\120\2\0"+
    "\1\116\12\0\1\123\1\0\1\123\4\0\1\116\4\0"+
    "\3\123\11\0\1\116\1\0\1\120\42\0\1\220\1\221"+
    "\2\127\14\0\1\220\1\0\1\220\11\0\3\220\56\0"+
    "\1\125\17\0\1\125\1\0\1\125\11\0\3\125\56\0"+
    "\1\222\17\0\1\222\1\0\1\222\11\0\3\222\55\0"+
    "\4\110\1\0\1\110\1\0\2\110\1\223\12\110\2\0"+
    "\1\110\5\0\5\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\7\0\1\110\1\204\2\110\1\0\1\110"+
    "\1\0\12\110\1\224\1\110\1\224\2\0\1\110\5\0"+
    "\1\110\1\224\1\225\1\224\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\6\0\1\112\1\226\1\227"+
    "\1\110\1\230\1\231\1\110\1\116\12\110\1\227\1\110"+
    "\1\227\2\0\1\110\1\0\1\116\3\0\1\110\3\227"+
    "\1\232\1\0\5\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\7\0\1\110\1\211\2\212\1\213\1\110"+
    "\1\0\12\110\1\233\1\110\1\233\2\0\1\110\5\0"+
    "\1\110\1\233\1\234\1\233\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\30\0\1\235\1\0\1\235"+
    "\11\0\1\235\1\236\1\235\55\0\4\110\1\0\1\110"+
    "\1\0\12\110\1\237\1\110\1\237\2\0\1\110\5\0"+
    "\1\110\1\237\1\240\1\237\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\6\0\1\112\1\113\1\227"+
    "\1\110\1\115\1\0\1\110\1\116\12\110\1\227\1\110"+
    "\1\227\2\0\1\110\1\0\1\116\3\0\1\110\3\227"+
    "\1\110\1\0\5\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\34\0\1\40\3\0\3\40\26\0\10\40"+
    "\1\152\1\0\3\40\1\0\2\40\40\0\1\40\3\0"+
    "\3\40\26\0\5\40\1\241\3\40\1\0\3\40\1\0"+
    "\2\40\13\0\4\110\1\0\1\110\1\0\15\110\2\0"+
    "\1\110\5\0\5\110\1\0\1\110\1\242\3\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\7\0\4\110\1\0\1\110"+
    "\1\0\15\110\2\0\1\110\5\0\5\110\1\0\5\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\3\0\1\110\2\0\1\110\1\243\2\110\7\0"+
    "\4\110\1\0\1\110\1\0\15\110\2\0\1\110\5\0"+
    "\5\110\1\0\1\110\1\132\3\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\7\0\1\110\1\146\2\110\1\0\1\110"+
    "\1\0\12\110\1\146\1\110\1\146\2\0\1\110\5\0"+
    "\1\110\3\146\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\7\0\1\110\1\244\2\110\1\0\1\110"+
    "\1\0\12\110\1\244\1\110\1\244\2\0\1\110\5\0"+
    "\1\110\3\244\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\72\0\1\245\31\0\1\245\24\0\1\40"+
    "\3\0\3\40\26\0\11\40\1\0\3\40\1\0\2\40"+
    "\10\0\1\246\65\0\1\247\1\0\1\247\10\0\1\247"+
    "\16\0\1\245\24\0\1\40\3\0\3\40\26\0\11\40"+
    "\1\0\1\250\2\40\1\0\2\40\106\0\1\245\16\0"+
    "\1\251\77\0\1\247\17\0\4\110\1\0\1\110\1\0"+
    "\15\110\2\0\1\110\5\0\5\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\3\110\1\242\34\0\1\40\3\0"+
    "\3\40\26\0\11\40\1\0\1\250\2\40\1\0\2\40"+
    "\14\0\1\252\17\0\1\252\1\0\1\252\11\0\3\252"+
    "\56\0\1\253\17\0\1\253\1\0\1\253\11\0\3\253"+
    "\54\0\2\254\1\163\17\0\1\163\1\0\1\163\11\0"+
    "\3\163\64\0\7\164\1\0\2\164\5\0\1\164\5\0"+
    "\1\172\5\0\3\172\2\164\24\0\1\172\3\0\1\172"+
    "\2\0\4\172\16\0\7\172\1\0\2\172\5\0\1\172"+
    "\5\0\1\166\5\0\3\166\2\172\24\0\1\166\3\0"+
    "\1\166\2\0\4\166\34\0\1\167\3\0\1\171\1\167"+
    "\1\171\26\0\11\171\1\0\3\171\1\0\1\167\1\171"+
    "\40\0\1\171\3\0\3\171\26\0\11\171\1\0\3\171"+
    "\1\0\2\171\22\0\7\172\1\0\2\172\5\0\1\172"+
    "\5\0\1\172\5\0\5\172\24\0\1\172\3\0\1\172"+
    "\2\0\4\172\16\0\7\172\1\0\2\172\5\0\1\172"+
    "\5\0\1\173\5\0\3\173\2\172\24\0\1\173\3\0"+
    "\1\173\2\0\4\173\10\0\1\255\17\0\1\255\1\0"+
    "\1\255\11\0\3\255\56\0\1\256\17\0\1\256\1\0"+
    "\1\256\11\0\3\256\55\0\2\202\1\0\1\202\3\0"+
    "\7\257\1\202\2\257\1\202\1\0\1\202\2\0\1\257"+
    "\5\0\1\257\3\202\2\0\5\257\24\0\1\257\3\0"+
    "\1\257\2\0\4\257\4\0\1\215\3\0\1\203\1\0"+
    "\1\120\2\0\1\116\12\0\1\203\1\0\1\203\4\0"+
    "\1\116\4\0\3\203\11\0\1\116\1\0\1\120\36\0"+
    "\1\215\2\0\1\110\1\204\1\110\1\115\1\0\1\110"+
    "\1\116\12\110\1\204\1\110\1\204\2\0\1\110\1\0"+
    "\1\116\3\0\1\110\3\204\1\110\1\0\5\110\1\0"+
    "\1\111\1\117\1\110\1\120\2\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\7\0\1\110"+
    "\1\260\2\110\1\0\1\110\1\0\12\110\1\204\1\110"+
    "\1\204\2\0\1\110\5\0\1\110\1\204\1\261\1\204"+
    "\1\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\7\0\1\110\1\262\2\212\1\213\1\110\1\0\12\110"+
    "\1\211\1\110\1\211\2\0\1\110\5\0\1\110\1\211"+
    "\1\263\1\211\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\10\0\1\264\34\0\1\265\56\0\1\110"+
    "\1\266\2\110\1\0\1\110\1\0\15\110\2\0\1\110"+
    "\5\0\2\110\1\267\2\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\6\0\1\270\1\271\1\211\2\110"+
    "\1\0\1\110\1\0\12\110\1\211\1\110\1\211\2\0"+
    "\1\110\5\0\1\110\3\211\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\7\0\1\110\1\211\2\110"+
    "\1\0\1\110\1\0\12\110\1\211\1\110\1\211\2\0"+
    "\1\110\5\0\1\110\3\211\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\10\0\1\214\17\0\1\214"+
    "\1\0\1\214\11\0\3\214\54\0\2\270\1\214\17\0"+
    "\1\214\1\0\1\214\11\0\3\214\63\0\1\116\21\0"+
    "\1\116\20\0\1\116\44\0\1\272\17\0\1\272\1\0"+
    "\1\272\11\0\3\272\55\0\1\110\1\273\2\110\1\0"+
    "\1\110\1\0\12\110\1\273\1\110\1\273\2\0\1\110"+
    "\5\0\1\110\3\273\1\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\6\0\2\126\1\220\17\0\1\220"+
    "\1\0\1\220\11\0\3\220\56\0\1\220\17\0\1\220"+
    "\1\0\1\220\11\0\3\220\54\0\2\126\1\222\17\0"+
    "\1\222\1\0\1\222\11\0\3\222\55\0\4\110\1\0"+
    "\1\110\1\0\2\110\1\274\12\110\2\0\1\110\5\0"+
    "\5\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\4\0\1\215\2\0\1\275\1\204\1\110\1\115\1\0"+
    "\1\110\1\116\12\110\1\204\1\110\1\204\2\0\1\110"+
    "\1\0\1\116\3\0\1\110\3\204\1\110\1\0\5\110"+
    "\1\0\1\111\1\117\1\110\1\120\2\0\2\110\1\0"+
    "\1\110\11\0\1\110\3\0\1\110\2\0\4\110\4\0"+
    "\1\215\2\0\1\275\1\224\1\110\1\115\1\0\1\110"+
    "\1\116\12\110\1\224\1\110\1\204\2\0\1\110\1\0"+
    "\1\116\3\0\1\110\1\204\1\224\1\204\1\110\1\0"+
    "\5\110\1\0\1\111\1\117\1\110\1\120\2\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\7\0\1\110\1\260\2\110\1\0\1\110\1\0\12\110"+
    "\1\224\1\110\1\224\2\0\1\110\5\0\1\110\1\224"+
    "\1\225\1\224\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\6\0\1\112\1\113\1\276\1\110\1\115"+
    "\1\0\1\110\1\116\12\110\1\276\1\110\1\276\2\0"+
    "\1\110\1\0\1\116\3\0\1\110\3\276\1\110\1\0"+
    "\5\110\1\0\1\111\1\117\1\110\1\120\2\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\7\0\1\110\1\262\2\212\1\213\1\110\1\0\12\110"+
    "\1\233\1\110\1\233\2\0\1\110\5\0\1\110\1\233"+
    "\1\277\1\233\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\10\0\1\264\17\0\1\235\1\0\1\235"+
    "\11\0\1\235\1\300\1\235\55\0\1\110\1\266\2\110"+
    "\1\0\1\110\1\0\12\110\1\237\1\110\1\237\2\0"+
    "\1\110\5\0\1\110\1\237\1\240\1\237\1\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\6\0\1\270"+
    "\1\271\1\211\1\110\1\275\1\301\1\110\1\0\12\110"+
    "\1\211\1\110\1\211\2\0\1\110\5\0\1\110\3\211"+
    "\1\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\6\0\1\270\1\271\1\233\1\110\1\275\1\301\1\110"+
    "\1\0\12\110\1\233\1\110\1\211\2\0\1\110\5\0"+
    "\1\110\1\211\1\233\1\211\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\12\0\2\301\111\0\1\235"+
    "\1\0\2\301\14\0\1\235\14\0\1\235\56\0\4\110"+
    "\1\0\1\110\1\0\15\110\2\0\1\110\5\0\4\110"+
    "\1\275\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\7\0\1\110\1\237\2\110\1\0\1\110\1\0\12\110"+
    "\1\237\2\110\2\0\1\110\5\0\2\110\1\237\1\110"+
    "\1\275\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\34\0\1\40\3\0\3\40\26\0\2\40\1\152\6\40"+
    "\1\0\3\40\1\0\2\40\13\0\1\132\3\110\1\0"+
    "\1\110\1\0\15\110\2\0\1\110\5\0\5\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\7\0\4\110"+
    "\1\0\1\110\1\0\15\110\2\0\1\110\5\0\5\110"+
    "\1\0\5\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\3\0\1\110\2\0\1\242\3\110"+
    "\6\0\1\126\1\147\1\244\2\110\1\0\1\110\1\0"+
    "\12\110\1\244\1\110\1\244\2\0\1\110\5\0\1\110"+
    "\3\244\1\110\1\0\5\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\72\0\1\247\1\0\1\247\11\0\1\247\15\0"+
    "\1\245\141\0\1\40\3\0\3\40\26\0\6\40\1\302"+
    "\2\40\1\0\3\40\1\0\2\40\110\0\1\247\20\0"+
    "\1\303\17\0\1\303\1\0\1\303\11\0\3\303\56\0"+
    "\1\304\17\0\1\304\1\0\1\304\11\0\3\304\56\0"+
    "\1\305\17\0\1\305\1\0\1\305\11\0\3\305\55\0"+
    "\2\202\1\0\1\202\3\0\7\306\1\202\2\306\1\202"+
    "\1\0\1\202\2\0\1\306\5\0\1\306\3\202\2\0"+
    "\5\306\24\0\1\306\3\0\1\306\2\0\4\306\4\0"+
    "\1\215\2\0\1\110\1\224\1\110\1\115\1\0\1\110"+
    "\1\116\12\110\1\224\1\110\1\224\2\0\1\110\1\0"+
    "\1\116\3\0\1\110\3\224\1\110\1\0\5\110\1\0"+
    "\1\111\1\117\1\110\1\120\2\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\4\0\1\215"+
    "\2\0\1\110\1\224\1\110\1\115\1\0\1\110\1\116"+
    "\12\110\1\224\1\110\1\204\2\0\1\110\1\0\1\116"+
    "\3\0\1\110\1\204\1\224\1\204\1\110\1\0\5\110"+
    "\1\0\1\111\1\117\1\110\1\120\2\0\2\110\1\0"+
    "\1\110\11\0\1\110\3\0\1\110\2\0\4\110\6\0"+
    "\1\270\1\271\1\307\2\110\1\0\1\110\1\0\12\110"+
    "\1\307\1\110\1\307\2\0\1\110\5\0\1\110\3\307"+
    "\1\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\6\0\1\270\1\271\1\307\2\110\1\0\1\110\1\0"+
    "\12\110\1\307\1\110\1\211\2\0\1\110\5\0\1\110"+
    "\1\211\1\307\1\211\1\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\10\0\1\310\17\0\1\310\1\0"+
    "\1\310\11\0\3\310\56\0\1\310\17\0\1\310\14\0"+
    "\1\310\56\0\1\110\1\237\2\110\1\0\1\110\1\0"+
    "\12\110\1\237\1\110\1\237\2\0\1\110\5\0\1\110"+
    "\3\237\1\110\1\0\5\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\7\0\1\110\1\237\2\110\1\0\1\110\1\0"+
    "\12\110\1\237\2\110\2\0\1\110\5\0\2\110\1\237"+
    "\2\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\10\0\1\311\17\0\1\311\1\0\1\311\11\0\3\311"+
    "\55\0\1\110\1\312\2\110\1\0\1\110\1\0\12\110"+
    "\1\312\1\110\1\312\2\0\1\110\5\0\1\110\3\312"+
    "\1\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\4\0\1\215\3\0\1\272\1\0\1\120\2\0\1\116"+
    "\12\0\1\272\1\0\1\272\4\0\1\116\4\0\3\272"+
    "\11\0\1\116\1\0\1\120\36\0\1\215\2\0\1\110"+
    "\1\273\1\110\1\115\1\0\1\110\1\116\12\110\1\273"+
    "\1\110\1\273\2\0\1\110\1\0\1\116\3\0\1\110"+
    "\3\273\1\110\1\0\5\110\1\0\1\111\1\117\1\110"+
    "\1\120\2\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\7\0\4\110\1\0\1\110\1\0"+
    "\3\110\1\313\11\110\2\0\1\110\5\0\5\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\7\0\4\110"+
    "\1\0\1\110\1\0\12\110\1\314\1\110\1\314\2\0"+
    "\1\110\5\0\1\110\3\314\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\6\0\1\112\1\315\1\121"+
    "\1\110\1\316\1\317\1\110\1\116\12\110\1\121\1\110"+
    "\1\121\2\0\1\110\1\0\1\116\3\0\1\110\3\121"+
    "\1\320\1\0\5\110\1\0\1\111\1\117\1\110\1\120"+
    "\2\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\6\0\1\270\1\271\1\321\1\110\1\275"+
    "\1\301\1\110\1\0\12\110\1\321\1\110\1\211\2\0"+
    "\1\110\5\0\1\110\1\211\1\321\1\211\1\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\10\0\1\322"+
    "\1\0\2\301\14\0\1\322\14\0\1\322\77\0\1\323"+
    "\1\0\1\323\11\0\3\323\102\0\1\40\3\0\3\40"+
    "\26\0\11\40\1\0\2\40\1\324\1\0\2\40\12\0"+
    "\1\270\1\271\1\211\1\110\1\325\1\326\1\110\1\0"+
    "\12\110\1\211\1\110\1\211\2\0\1\110\5\0\1\110"+
    "\3\211\1\110\1\0\5\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\12\0\2\326\110\0\4\110\1\0\1\110\1\0"+
    "\4\110\1\327\10\110\2\0\1\110\5\0\5\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\7\0\1\110"+
    "\1\330\2\110\1\0\1\110\1\0\12\110\1\330\1\110"+
    "\1\330\2\0\1\110\5\0\1\110\3\330\1\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\4\0\1\331"+
    "\2\0\1\110\1\204\2\110\1\0\1\110\1\0\12\110"+
    "\1\204\1\110\1\204\2\0\1\110\5\0\1\110\3\204"+
    "\1\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\7\0\1\110\1\332\2\212\1\213\1\110\1\0\12\110"+
    "\1\333\1\110\1\333\2\0\1\110\5\0\1\110\1\333"+
    "\1\334\1\333\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\10\0\1\335\17\0\1\336\1\0\1\336"+
    "\11\0\1\336\1\337\1\336\55\0\1\110\1\340\2\110"+
    "\1\0\1\110\1\0\12\110\1\341\1\110\1\341\2\0"+
    "\1\110\5\0\1\110\1\341\1\342\1\341\1\110\1\0"+
    "\5\110\1\0\1\111\2\110\3\0\2\110\1\0\1\110"+
    "\11\0\1\110\3\0\1\110\2\0\4\110\6\0\1\270"+
    "\1\271\1\211\1\110\1\343\1\344\1\110\1\0\12\110"+
    "\1\211\1\110\1\211\2\0\1\110\5\0\1\110\3\211"+
    "\1\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\12\0\2\344\111\0\1\345\17\0\1\345\1\0\1\345"+
    "\11\0\3\345\102\0\1\40\3\0\3\40\26\0\11\40"+
    "\1\0\3\40\1\0\1\40\1\152\13\0\4\110\1\0"+
    "\1\110\1\0\12\110\1\346\1\110\1\346\2\0\1\110"+
    "\5\0\1\110\3\346\1\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\30\0\1\347\1\0\1\347\11\0"+
    "\3\347\55\0\4\110\1\0\1\110\1\0\5\110\1\350"+
    "\7\110\2\0\1\110\5\0\5\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\7\0\1\110\1\351\2\110"+
    "\1\0\1\110\1\0\12\110\1\351\1\110\1\351\2\0"+
    "\1\110\5\0\1\110\3\351\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\10\0\1\352\34\0\1\353"+
    "\55\0\1\270\1\271\1\354\2\110\1\0\1\110\1\0"+
    "\12\110\1\354\1\110\1\354\2\0\1\110\5\0\1\110"+
    "\3\354\1\110\1\0\5\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\6\0\1\270\1\271\1\211\1\110\1\355\1\356"+
    "\1\110\1\0\12\110\1\211\1\110\1\211\2\0\1\110"+
    "\5\0\1\110\3\211\1\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\6\0\1\270\1\271\1\357\1\110"+
    "\1\355\1\356\1\110\1\0\12\110\1\357\1\110\1\211"+
    "\2\0\1\110\5\0\1\110\1\211\1\357\1\211\1\110"+
    "\1\0\5\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\3\0\1\110\2\0\4\110\10\0"+
    "\1\360\17\0\1\360\1\0\1\360\11\0\3\360\60\0"+
    "\2\356\111\0\1\361\1\0\2\356\14\0\1\361\14\0"+
    "\1\361\56\0\1\110\1\362\2\110\1\0\1\110\1\0"+
    "\12\110\1\362\1\110\1\362\2\0\1\110\5\0\1\110"+
    "\3\362\1\110\1\0\5\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\7\0\4\110\1\0\1\110\1\0\15\110\2\0"+
    "\1\110\5\0\4\110\1\355\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\7\0\1\110\1\363\2\110\1\0"+
    "\1\110\1\0\12\110\1\363\2\110\2\0\1\110\5\0"+
    "\2\110\1\363\1\110\1\355\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\7\0\4\110\1\0\1\110\1\0"+
    "\12\110\1\364\1\110\1\364\2\0\1\110\5\0\1\110"+
    "\3\364\1\110\1\0\5\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\30\0\1\365\1\0\1\365\11\0\3\365\56\0"+
    "\1\366\17\0\1\366\1\0\1\366\11\0\3\366\55\0"+
    "\1\110\1\367\2\110\1\0\1\110\1\0\12\110\1\367"+
    "\1\110\1\367\2\0\1\110\5\0\1\110\3\367\1\110"+
    "\1\0\5\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\3\0\1\110\2\0\4\110\10\0"+
    "\1\370\17\0\1\370\1\0\1\370\11\0\3\370\55\0"+
    "\4\110\1\0\1\110\1\0\6\110\1\371\6\110\2\0"+
    "\1\110\5\0\5\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\7\0\1\110\1\372\2\110\1\0\1\110"+
    "\1\0\12\110\1\372\1\110\1\372\2\0\1\110\5\0"+
    "\1\110\3\372\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\10\0\1\373\17\0\1\373\1\0\1\373"+
    "\11\0\3\373\56\0\1\373\17\0\1\373\14\0\1\373"+
    "\55\0\1\270\1\271\1\211\1\110\1\374\1\375\1\110"+
    "\1\0\12\110\1\211\1\110\1\211\2\0\1\110\5\0"+
    "\1\110\3\211\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\7\0\4\110\1\0\1\110\1\0\12\110"+
    "\1\376\1\110\1\377\2\0\1\110\5\0\1\110\1\377"+
    "\1\376\1\u0100\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\30\0\1\u0101\1\0\1\u0102\11\0\1\u0102"+
    "\1\u0101\1\u0103\54\0\1\270\1\271\1\211\1\110\1\u0104"+
    "\1\u0105\1\110\1\0\12\110\1\211\1\110\1\211\2\0"+
    "\1\110\5\0\1\110\3\211\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\12\0\2\375\113\0\2\u0105"+
    "\110\0\4\110\1\0\1\110\1\0\15\110\2\0\1\110"+
    "\5\0\4\110\1\374\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\7\0\4\110\1\0\1\110\1\0\15\110"+
    "\2\0\1\110\5\0\4\110\1\u0104\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\7\0\1\110\1\u0106\2\110"+
    "\1\0\1\110\1\0\12\110\1\u0106\1\110\1\u0106\2\0"+
    "\1\110\5\0\1\110\3\u0106\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\10\0\1\u0107\17\0\1\u0107"+
    "\1\0\1\u0107\11\0\3\u0107\56\0\1\u0108\17\0\1\u0108"+
    "\1\0\1\u0108\11\0\3\u0108\55\0\1\110\1\u0109\2\110"+
    "\1\0\1\110\1\0\12\110\1\u0109\1\110\1\u0109\2\0"+
    "\1\110\5\0\1\110\3\u0109\1\110\1\0\5\110\1\0"+
    "\1\111\2\110\3\0\2\110\1\0\1\110\11\0\1\110"+
    "\3\0\1\110\2\0\4\110\10\0\1\u010a\17\0\1\u010a"+
    "\1\0\1\u010a\11\0\3\u010a\55\0\4\110\1\0\1\110"+
    "\1\0\7\110\1\u010b\5\110\2\0\1\110\5\0\5\110"+
    "\1\0\5\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\3\0\1\110\2\0\4\110\7\0"+
    "\1\u010c\114\0\1\110\1\u010d\2\110\1\0\1\110\1\0"+
    "\12\110\1\u010d\2\110\2\0\1\110\5\0\2\110\1\u010d"+
    "\1\u010e\1\110\1\0\5\110\1\0\1\111\2\110\3\0"+
    "\2\110\1\0\1\110\11\0\1\110\3\0\1\110\2\0"+
    "\4\110\10\0\1\u010f\17\0\1\u010f\14\0\1\u010f\1\u0110"+
    "\55\0\1\110\1\377\2\110\1\0\1\110\1\0\12\110"+
    "\1\377\1\110\1\377\2\0\1\110\5\0\1\110\3\377"+
    "\1\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\7\0\1\110\1\377\2\110\1\0\1\110\1\0\15\110"+
    "\2\0\1\110\5\0\2\110\1\377\2\110\1\0\5\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\3\0\1\110\2\0\4\110\10\0\1\u0102\17\0"+
    "\1\u0102\1\0\1\u0102\11\0\3\u0102\56\0\1\u0102\34\0"+
    "\1\u0102\56\0\1\110\1\u010d\2\110\1\0\1\110\1\0"+
    "\12\110\1\376\1\110\1\377\2\0\1\110\5\0\1\110"+
    "\1\377\1\376\1\u0100\1\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\10\0\1\u010f\17\0\1\u0101\1\0"+
    "\1\u0102\11\0\1\u0102\1\u0101\1\u0103\55\0\1\110\1\u0111"+
    "\2\110\1\0\1\110\1\0\12\110\1\u0111\1\110\1\u0111"+
    "\2\0\1\110\5\0\1\110\3\u0111\1\110\1\0\5\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\3\0\1\110\2\0\4\110\10\0\1\u0112\17\0"+
    "\1\u0112\1\0\1\u0112\11\0\3\u0112\55\0\1\110\1\u0113"+
    "\2\110\1\0\1\110\1\0\12\110\1\u0113\1\110\1\u0113"+
    "\2\0\1\110\5\0\1\110\3\u0113\1\110\1\0\5\110"+
    "\1\0\1\111\2\110\3\0\2\110\1\0\1\110\11\0"+
    "\1\110\3\0\1\110\2\0\4\110\10\0\1\u0114\17\0"+
    "\1\u0114\1\0\1\u0114\11\0\3\u0114\55\0\4\110\1\0"+
    "\1\110\1\0\10\110\1\u0115\4\110\2\0\1\110\5\0"+
    "\5\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\4\0\1\375\117\0\1\110\1\u0116\2\110\1\0\1\110"+
    "\1\0\12\110\1\u0116\1\110\1\u0116\2\0\1\110\5\0"+
    "\1\110\3\u0116\1\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110\10\0\1\u0117\17\0\1\u0117\1\0\1\u0117"+
    "\11\0\3\u0117\55\0\4\110\1\0\1\110\1\0\15\110"+
    "\2\0\1\110\5\0\5\110\1\u0108\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\50\0\1\u0108\53\0\4\110\1\0"+
    "\1\110\1\0\11\110\1\u0118\3\110\2\0\1\110\5\0"+
    "\5\110\1\0\5\110\1\0\1\111\2\110\3\0\2\110"+
    "\1\0\1\110\11\0\1\110\3\0\1\110\2\0\4\110"+
    "\7\0\4\110\1\0\1\110\1\0\7\110\1\u0119\5\110"+
    "\2\0\1\110\5\0\5\110\1\0\5\110\1\0\1\111"+
    "\2\110\3\0\2\110\1\0\1\110\11\0\1\110\3\0"+
    "\1\110\2\0\4\110\7\0\4\110\1\0\1\110\1\0"+
    "\12\110\1\u011a\1\110\1\u011a\2\0\1\110\5\0\5\110"+
    "\1\0\5\110\1\0\1\111\2\110\3\0\2\110\1\0"+
    "\1\110\11\0\1\110\3\0\1\110\2\0\4\110\7\0"+
    "\4\110\1\0\1\110\1\0\13\110\1\117\1\110\2\0"+
    "\1\110\5\0\5\110\1\0\5\110\1\0\1\111\2\110"+
    "\3\0\2\110\1\0\1\110\11\0\1\110\3\0\1\110"+
    "\2\0\4\110";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18095];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\7\11\27\1\1\11\1\1\1\11\20\1\1\11"+
    "\16\1\4\0\1\1\1\0\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\3\0\2\1\1\0\1\1\3\0\3\1"+
    "\3\0\1\1\3\0\1\1\1\0\1\1\3\0\1\1"+
    "\2\0\11\1\1\11\1\1\1\0\1\11\1\1\2\0"+
    "\2\1\4\0\1\1\2\0\1\1\5\0\1\1\1\0"+
    "\2\1\1\0\1\1\3\0\2\1\4\0\1\1\2\0"+
    "\1\1\1\11\2\0\1\1\1\0\2\1\4\0\4\1"+
    "\6\0\2\1\2\0\2\1\2\0\2\1\2\11\2\1"+
    "\1\0\2\1\6\0\1\1\2\0\1\1\5\0\3\1"+
    "\17\0\1\1\2\0\1\1\12\0\1\1\3\0\4\1"+
    "\1\11\1\1\4\0\1\11\15\0\2\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	JCas UIMA_JCas;

	Range currentRange;
	Currensy currentCurrensy;
	ComplexWord currentComplexWord;	
	Date currentDate;		
	
	boolean inRange;
	boolean currensyEnd;
	boolean inComplex;
	boolean inDate;

	int beginPosition;
	

	public JFlex_Tokenizer(java.io.Reader in, JCas UIMA_JCas) {
		this.UIMA_JCas = UIMA_JCas;
    	this.zzReader = in;
    	allBooleansToFalse();
    }
    
    public void allBooleansToFalse() {
    	this.inRange = false; 
    	this.currensyEnd = false; 
    	this.inComplex = false;
    	this.inDate = false; 		
    }
	public boolean isEof() {
		return zzAtEOF;
	}

	private void back() {
		yypushback(yylength());
	}	  
	
	public Letters getLettersToken(String language, String letterCase) {
		Letters token = new Letters(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setLanguage(language);
		token.setLetterCase(letterCase);
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Number getNumberToken(String kind, String sign) {
		Number token = new Number(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setKind(kind);
		token.setSign(sign);
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Separator getSeparatorToken(String kind) {
		Separator token = new Separator(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setKind(kind);		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public PM getPmToken() {
		PM token = new PM(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Bracket getBracketToken() {
		Bracket token = new Bracket(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Symbol getSymbolToken() {
		Symbol token = new Symbol(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());		
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	
	public Abbrevation getAbbrevationToken(String lang) {
		Abbrevation token = new Abbrevation(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLanguage(lang);
		return token;
	}
	public RussianWord getRussianWordToken() {
    		RussianWord token = new RussianWord(UIMA_JCas);
    		token.setNorm(yytext().toLowerCase());
    		token.setText(yytext().toString());
    		token.setBegin(zzCurrentPos);
    		token.setEnd(zzCurrentPos + yylength());
    		return token;
    	}

	public Range getRangeToken(String left, String right) {
		Range token = new Range(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLeft(left);
		token.setRight(right);
		return token;
	}	

	public Currensy getCurrensyToken(String value, String kindOfCurrensy) {
		Currensy token = new Currensy(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setValue(value);
		token.setCurrensySymbol(kindOfCurrensy);
		return token;
	}

/*	public Measurement getMeasurementToken(Number value, String unitName) {
		Measurement token = new Measurement(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());

	}*/

	public ComplexWord getComplexWordToken(String left, String right) {
		ComplexWord token = new ComplexWord(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setLeft(left);
		token.setRight(right);
		return token;
	}

	public Date getDateToken(String year, String mounth, String day) {
		Date token = new Date(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		token.setYear(year);
		token.setMounth(mounth);
		token.setDay(day);
		return token;
	}

	public Email getEmailToken() {
		Email token = new Email(UIMA_JCas);
		token.setNorm(null);
		token.setText(yytext().toString());
		token.setBegin(zzCurrentPos);
		token.setEnd(zzCurrentPos + yylength());
		return token;
	}
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JFlex_Tokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JFlex_Tokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { return getEmailToken();
          }
        case 42: break;
        case 14: 
          { Symbol currensySymbol = getSymbolToken();
			currentCurrensy.setCurrensySymbol(currensySymbol.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);				
				currensyEnd = true;
			}
			return currensySymbol;
          }
        case 43: break;
        case 28: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Mixed");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Mixed");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 44: break;
        case 7: 
          { yybegin(YYINITIAL); return getPmToken();
          }
        case 45: break;
        case 31: 
          { currentRange = getRangeToken(null, null);
			yybegin(IN_RANGE);
			back();
			return currentRange;
          }
        case 46: break;
        case 21: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setMounth(number.getText());
			inDate = false;
		}
		else {
			currentDate.setDay(number.getText());			
			inDate = true;
		}
		yybegin(IN_DATE_DMY);
		return number;
          }
        case 47: break;
        case 8: 
          { yybegin(YYINITIAL); return getNumberToken("Integer","Positive");
          }
        case 48: break;
        case 15: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Upper");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Upper");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 49: break;
        case 5: 
          { yybegin(YYINITIAL); return getSeparatorToken("Space");
          }
        case 50: break;
        case 30: 
          { yybegin(YYINITIAL); return getNumberToken("Real","Positive");
          }
        case 51: break;
        case 38: 
          { Number number = getNumberToken("Integer","Positive");
		currentDate.setYear(number.getText());
		yybegin(YYINITIAL);
		return number;
          }
        case 52: break;
        case 22: 
          { currentCurrensy = getCurrensyToken(null, null);
			yybegin(IN_CURRENSY);
			back();			
			return currentCurrensy;
          }
        case 53: break;
        case 1: 
          { System.out.print(yytext());
          }
        case 54: break;
        case 17: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Lower");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Lower");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 55: break;
        case 24: 
          { yybegin(YYINITIAL); return getAbbrevationToken("English");
          }
        case 56: break;
        case 32: 
          { yybegin(YYINITIAL); return getAbbrevationToken("Russian");
          }
        case 57: break;
        case 23: 
          { yybegin(YYINITIAL); return getNumberToken("Integer","Negative");
          }
        case 58: break;
        case 26: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Capital");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Capital");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 59: break;
        case 13: 
          { Number numberValue = getNumberToken("Integer","Positive");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);			
				currensyEnd = true;
			}
			return numberValue;
          }
        case 60: break;
        case 10: 
          { yybegin(YYINITIAL); return getBracketToken();
          }
        case 61: break;
        case 2: 
          { yybegin(YYINITIAL); return getSeparatorToken("New line");
          }
        case 62: break;
        case 35: 
          { yybegin(YYINITIAL); return getNumberToken("Real","Negative");
          }
        case 63: break;
        case 9: 
          { yybegin(YYINITIAL); return getSymbolToken();
          }
        case 64: break;
        case 34: 
          { Number numberValue = getNumberToken("Real","Positive");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);				
				currensyEnd = true;
			}
			return numberValue;
          }
        case 65: break;
        case 41: 
          { currentDate = getDateToken(null,null,null);
			yybegin(IN_DATE_YMD);
			back();
			return currentDate;
          }
        case 66: break;
        case 40: 
          { currentDate = getDateToken(null,null,null);
			yybegin(IN_DATE_DMY);
			back();
			return currentDate;
          }
        case 67: break;
        case 11: 
          { yybegin(YYINITIAL); return getRussianWordToken();
          }
        case 68: break;
        case 19: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Lower");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Lower");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 69: break;
        case 20: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setDay(number.getText());
			yybegin(YYINITIAL);
			inDate = false;
		}
		else {
			currentDate.setMounth(number.getText());
			yybegin(IN_DATE_YMD);
			inDate = true;
		}
		return number;
          }
        case 70: break;
        case 3: 
          { yybegin(YYINITIAL); return getSeparatorToken("Carrige return");
          }
        case 71: break;
        case 29: 
          { Number number = getNumberToken("Integer","Positive");
		if (inDate == true) {
			currentDate.setMounth(number.getText());			
			inDate = false;
		}
		else {
			currentDate.setDay(number.getText());			
			inDate = true;
		}
		yybegin(IN_DATE_DMY);
		return number;
          }
        case 72: break;
        case 6: 
          { yybegin(YYINITIAL); return getSeparatorToken("Form feed");
          }
        case 73: break;
        case 33: 
          { if (inRange == true) {
				yybegin(YYINITIAL); 
				Number numberRight = getNumberToken("Real","Positive");
				currentRange.setRight(numberRight.getText());
				inRange = false;
				return numberRight;
			}
			else {
				yybegin(IN_RANGE);
				Number numberLeft = getNumberToken("Real","Positive");
				currentRange.setLeft(numberLeft.getText());
				inRange = true;
				return numberLeft;
			}
          }
        case 74: break;
        case 27: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("English","Capital");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("English","Capital");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 75: break;
        case 36: 
          { Number numberValue = getNumberToken("Real","Negative");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);
				currensyEnd = true;
			}
			return numberValue;
          }
        case 76: break;
        case 18: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Mixed");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Mixed");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 77: break;
        case 12: 
          { if (inRange == true) {
				yybegin(YYINITIAL); 
				Number numberRight = getNumberToken("Integer","Positive");
				currentRange.setRight(numberRight.getText());
				inRange = false;
				return numberRight;
			}
			else {
				yybegin(IN_RANGE);
				Number numberLeft = getNumberToken("Integer","Positive");
				currentRange.setLeft(numberLeft.getText());
				inRange = true;
				return numberLeft;
			}
          }
        case 78: break;
        case 16: 
          { if (inComplex == true) {
	    		yybegin(YYINITIAL);
	    		Letters lettresRight = getLettersToken("Russian","Upper");
	    		currentComplexWord.setRight(lettresRight.getText());
	    		inComplex = false;
	    		return lettresRight;
	    	}
	    	else {
	    		yybegin(IN_COMPLEX);
	    		Letters lettresLeft = getLettersToken("Russian","Upper");
	    		currentComplexWord.setLeft(lettresLeft.getText());
	    		inComplex = true;
	    		return lettresLeft;
	    	}
          }
        case 79: break;
        case 4: 
          { yybegin(YYINITIAL); return getSeparatorToken("Tabulation");
          }
        case 80: break;
        case 25: 
          { Number numberValue = getNumberToken("Integer","Negative");
			currentCurrensy.setValue(numberValue.getText());
			if (currensyEnd == true) {
				yybegin(YYINITIAL);
				currensyEnd = false;
			}
			else {
				yybegin(IN_CURRENSY);			
				currensyEnd = true;
			}
			return numberValue;
          }
        case 81: break;
        case 37: 
          { Number number = getNumberToken("Integer","Positive");
		currentDate.setYear(number.getText());
		return number;
          }
        case 82: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java JFlex_Tokenizer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        JFlex_Tokenizer scanner = null;
        try {
          scanner = new JFlex_Tokenizer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
